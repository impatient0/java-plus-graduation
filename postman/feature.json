{
	"info": {
		"_postman_id": "94b0e60d-ca4c-46d6-8c32-64ea51923d37",
		"name": "Feature – Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41167888"
	},
	"item": [
		{
			"name": "API – Private",
			"item": [
				{
					"name": "Добавление комментария",
					"item": [
						{
							"name": "Добавление комментария – Успех – 201",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomSuffix = Math.floor(Math.random() * 100000);\r",
											"\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"function getFormattedFutureDate(hoursToAdd) {\r",
											"    const date = new Date();\r",
											"    date.setHours(date.getHours() + hoursToAdd);\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const seconds = String(date.getSeconds()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${baseUrl}/admin/users`,\r",
											"    method: 'POST',\r",
											"    header: {'Content-Type': 'application/json'},\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: `testuser_commenter_${randomSuffix}@example.com`,\r",
											"            name: `Test Commenter ${randomSuffix}`\r",
											"        })\r",
											"    }\r",
											"}, (err, response) => {\r",
											"    if (err) {\r",
											"        console.error(\"Pre-request: Failed to create user:\", err);\r",
											"        throw new Error(\"Pre-request: Failed to create user\");\r",
											"    }\r",
											"    if (response.code !== 201) {\r",
											"        console.error(\"Pre-request: User creation failed with status \" + response.code + \":\", response.text());\r",
											"        throw new Error(`Pre-request: User creation failed with status ${response.code}`);\r",
											"    }\r",
											"    const userData = response.json();\r",
											"    pm.environment.set(\"createdUserId\", userData.id);\r",
											"    pm.environment.set(\"createdUserName\", userData.name);\r",
											"    console.log(\"Pre-request: User created:\", userData.id);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/admin/categories`,\r",
											"        method: 'POST',\r",
											"        header: {'Content-Type': 'application/json'},\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                name: `Test Category For Comment ${randomSuffix}`\r",
											"            })\r",
											"        }\r",
											"    }, (errCat, responseCat) => {\r",
											"        if (errCat) {\r",
											"            console.error(\"Pre-request: Failed to create category:\", errCat);\r",
											"            throw new Error(\"Pre-request: Failed to create category\");\r",
											"        }\r",
											"        if (responseCat.code !== 201) {\r",
											"            console.error(\"Pre-request: Category creation failed with status \" + responseCat.code + \":\", responseCat.text());\r",
											"            throw new Error(`Pre-request: Category creation failed with status ${responseCat.code}`);\r",
											"        }\r",
											"        const categoryData = responseCat.json();\r",
											"        console.log(\"Pre-request: Category created:\", categoryData.id);\r",
											"\r",
											"        const eventDateForCreation = getFormattedFutureDate(3);\r",
											"\r",
											"        pm.sendRequest({\r",
											"            url: `${baseUrl}/users/${userData.id}/events`,\r",
											"            method: 'POST',\r",
											"            header: {'Content-Type': 'application/json'},\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    annotation: `Annotation for event with comments ${randomSuffix}`,\r",
											"                    category: categoryData.id,\r",
											"                    description: `Detailed description for event with comments ${randomSuffix}`,\r",
											"                    eventDate: eventDateForCreation,\r",
											"                    location: { lat: 55.751 + (randomSuffix / 1000000), lon: 37.612 + (randomSuffix / 1000000) },\r",
											"                    paid: false,\r",
											"                    participantLimit: 10,\r",
											"                    requestModeration: true,\r",
											"                    title: `Event with Comments ${randomSuffix}`,\r",
											"                    commentsEnabled: true\r",
											"                })\r",
											"            }\r",
											"        }, (errEvent, responseEvent) => {\r",
											"            if (errEvent) {\r",
											"                console.error(\"Pre-request: Failed to create event:\", errEvent);\r",
											"                throw new Error(\"Pre-request: Failed to create event\");\r",
											"            }\r",
											"            if (responseEvent.code !== 201) {\r",
											"                console.error(\"Pre-request: Event creation failed with status \" + responseEvent.code + \":\", responseEvent.text());\r",
											"                throw new Error(`Pre-request: Event creation failed with status ${responseEvent.code}`);\r",
											"            }\r",
											"            const eventData = responseEvent.json();\r",
											"            pm.environment.set(\"createdEventId\", eventData.id);\r",
											"            console.log(\"Pre-request: Event created:\", eventData.id);\r",
											"\r",
											"            pm.sendRequest({\r",
											"                url: `${baseUrl}/admin/events/${eventData.id}`,\r",
											"                method: 'PATCH',\r",
											"                header: {'Content-Type': 'application/json'},\r",
											"                body: {\r",
											"                    mode: 'raw',\r",
											"                    raw: JSON.stringify({\r",
											"                        stateAction: \"PUBLISH_EVENT\"\r",
											"                    })\r",
											"                }\r",
											"            }, (errPublish, responsePublish) => {\r",
											"                if (errPublish) {\r",
											"                    console.error(\"Pre-request: Failed to publish event:\", errPublish);\r",
											"                    throw new Error(\"Pre-request: Failed to publish event\");\r",
											"                }\r",
											"                if (responsePublish.code !== 200) {\r",
											"                    console.error(\"Pre-request: Event publishing failed with status \" + responsePublish.code + \":\", responsePublish.text());\r",
											"                    let errorMessage = responsePublish.text();\r",
											"                    try { const errorJson = JSON.parse(errorMessage); errorMessage = errorJson.message || errorMessage; } catch(e) {}\r",
											"                    throw new Error(`Pre-request: Event publishing failed with status ${responsePublish.code}: ${errorMessage}`);\r",
											"                }\r",
											"                console.log(\"Pre-request: Event published:\", eventData.id);\r",
											"\r",
											"                pm.environment.set(\"commentText\", `This is a lovely test comment ${randomSuffix}`);\r",
											"                console.log(\"Pre-request: Setup complete for successful comment creation.\");\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код ответа 201 Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ является валидным JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"const expectedUserId = parseInt(pm.environment.get(\"createdUserId\"));\r",
											"const expectedUserName = pm.environment.get(\"createdUserName\");\r",
											"const expectedEventId = parseInt(pm.environment.get(\"createdEventId\"));\r",
											"const expectedCommentText = pm.environment.get(\"commentText\");\r",
											"\r",
											"pm.test(\"ID комментария присутствует и является числом\", function () {\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id).to.be.a('number');\r",
											"    pm.environment.set(\"createdCommentId\", jsonData.id);\r",
											"});\r",
											"\r",
											"pm.test(\"Текст комментария совпадает с отправленным текстом\", function () {\r",
											"    pm.expect(jsonData.text).to.equal(expectedCommentText);\r",
											"});\r",
											"\r",
											"pm.test(\"ID автора совпадает с ID созданного пользователя\", function () {\r",
											"    pm.expect(jsonData.author).to.be.an('object');\r",
											"    pm.expect(jsonData.author.id).to.equal(expectedUserId);\r",
											"});\r",
											"\r",
											"pm.test(\"Имя автора совпадает с именем созданного пользователя\", function () {\r",
											"    pm.expect(jsonData.author.name).to.equal(expectedUserName);\r",
											"});\r",
											"\r",
											"pm.test(\"ID события совпадает с ID созданного события\", function () {\r",
											"    pm.expect(jsonData.eventId).to.equal(expectedEventId);\r",
											"});\r",
											"\r",
											"pm.test(\"Временная метка createdOn присутствует и имеет формат 'yyyy-MM-dd HH:mm:ss'\", function () {\r",
											"    pm.expect(jsonData.createdOn).to.be.a('string');\r",
											"    pm.expect(jsonData.createdOn).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/);\r",
											"});\r",
											"\r",
											"pm.test(\"Флаг isEdited изначально false\", function () {\r",
											"    pm.expect(jsonData.isEdited).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"createdUserId\");\r",
											"    pm.environment.unset(\"createdUserName\");\r",
											"    pm.environment.unset(\"createdEventId\");\r",
											"    pm.environment.unset(\"commentText\");\r",
											"    pm.environment.unset(\"createdCommentId\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"{{commentText}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{createdUserId}}/comments?eventId={{createdEventId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{createdUserId}}",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{createdEventId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария – Неопубликованное событие – 409",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomSuffix = Math.floor(Math.random() * 100000);\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"function getFormattedFutureDate(hoursToAdd) {\r",
											"    const date = new Date();\r",
											"    date.setHours(date.getHours() + hoursToAdd);\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const seconds = String(date.getSeconds()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${baseUrl}/admin/users`,\r",
											"    method: 'POST',\r",
											"    header: {'Content-Type': 'application/json'},\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: `testuser_unpublished_${randomSuffix}@example.com`,\r",
											"            name: `Test Unpublished Event User ${randomSuffix}`\r",
											"        })\r",
											"    }\r",
											"}, (err, response) => {\r",
											"    if (err) {\r",
											"        console.error(\"Pre-request: Не удалось создать пользователя:\", err);\r",
											"        throw new Error(\"Pre-request: Не удалось создать пользователя\");\r",
											"    }\r",
											"    if (response.code !== 201) {\r",
											"        console.error(\"Pre-request: Создание пользователя не удалось, статус \" + response.code + \":\", response.text());\r",
											"        throw new Error(`Pre-request: Создание пользователя не удалось, статус ${response.code}`);\r",
											"    }\r",
											"    const userData = response.json();\r",
											"    pm.environment.set(\"createdUserId\", userData.id);\r",
											"    console.log(\"Pre-request: Пользователь создан:\", userData.id);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/admin/categories`,\r",
											"        method: 'POST',\r",
											"        header: {'Content-Type': 'application/json'},\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                name: `Test Category For Unpublished Comment ${randomSuffix}`\r",
											"            })\r",
											"        }\r",
											"    }, (errCat, responseCat) => {\r",
											"        if (errCat) {\r",
											"            console.error(\"Pre-request: Не удалось создать категорию:\", errCat);\r",
											"            throw new Error(\"Pre-request: Не удалось создать категорию\");\r",
											"        }\r",
											"        if (responseCat.code !== 201) {\r",
											"            console.error(\"Pre-request: Создание категории не удалось, статус \" + responseCat.code + \":\", responseCat.text());\r",
											"            throw new Error(`Pre-request: Создание категории не удалось, статус ${responseCat.code}`);\r",
											"        }\r",
											"        const categoryData = responseCat.json();\r",
											"        console.log(\"Pre-request: Категория создана:\", categoryData.id);\r",
											"\r",
											"        const eventDateForCreation = getFormattedFutureDate(3);\r",
											"\r",
											"        pm.sendRequest({\r",
											"            url: `${baseUrl}/users/${userData.id}/events`,\r",
											"            method: 'POST',\r",
											"            header: {'Content-Type': 'application/json'},\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    annotation: `Annotation for unpublished event ${randomSuffix}`,\r",
											"                    category: categoryData.id,\r",
											"                    description: `Detailed description for unpublished event ${randomSuffix}`,\r",
											"                    eventDate: eventDateForCreation,\r",
											"                    location: { lat: 55.752 + (randomSuffix / 1000000), lon: 37.613 + (randomSuffix / 1000000) },\r",
											"                    paid: false,\r",
											"                    participantLimit: 10,\r",
											"                    requestModeration: true,\r",
											"                    title: `Unpublished Event for Comment Test ${randomSuffix}`,\r",
											"                    commentsEnabled: true\r",
											"                })\r",
											"            }\r",
											"        }, (errEvent, responseEvent) => {\r",
											"            if (errEvent) {\r",
											"                console.error(\"Pre-request: Не удалось создать событие:\", errEvent);\r",
											"                throw new Error(\"Pre-request: Не удалось создать событие\");\r",
											"            }\r",
											"            if (responseEvent.code !== 201) {\r",
											"                console.error(\"Pre-request: Создание события не удалось, статус \" + responseEvent.code + \":\", responseEvent.text());\r",
											"                throw new Error(`Pre-request: Создание события не удалось, статус ${responseEvent.code}`);\r",
											"            }\r",
											"            const eventData = responseEvent.json();\r",
											"            pm.environment.set(\"createdEventId\", eventData.id);\r",
											"            console.log(\"Pre-request: Событие (неопубликованное) создано:\", eventData.id, \"Состояние:\", eventData.state);\r",
											"\r",
											"            pm.environment.set(\"commentText\", `This comment should fail ${randomSuffix}`);\r",
											"            console.log(\"Pre-request: Настройка для теста с неопубликованным событием завершена.\");\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 409 Conflict\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ является валидным JSON (для ApiError)\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Тело ответа содержит ожидаемые поля ошибки ApiError\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    pm.expect(jsonData).to.have.all.keys('status', 'reason', 'message', 'timestamp');\r",
											"    pm.expect(jsonData.status).to.equal(\"CONFLICT\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение об ошибке указывает на проблему с событием (например, не опубликовано)\", function () {\r",
											"    console.log(\"Сообщение об ошибке: \", jsonData.message);\r",
											"    pm.expect(jsonData.message).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Timestamp ошибки присутствует и в правильном формате\", function () {\r",
											"    pm.expect(jsonData.timestamp).to.be.a('string');\r",
											"    pm.expect(jsonData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"createdUserId\");\r",
											"    pm.environment.unset(\"createdEventId\");\r",
											"    pm.environment.unset(\"commentText\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"{{commentText}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{createdUserId}}/comments?eventId={{createdEventId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{createdUserId}}",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{createdEventId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария – Комментарии отключены – 409",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomSuffix = Math.floor(Math.random() * 100000);\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"function getFormattedFutureDate(hoursToAdd) {\r",
											"    const date = new Date();\r",
											"    date.setHours(date.getHours() + hoursToAdd);\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const seconds = String(date.getSeconds()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${baseUrl}/admin/users`,\r",
											"    method: 'POST',\r",
											"    header: {'Content-Type': 'application/json'},\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: `testuser_comments_disabled_${randomSuffix}@example.com`,\r",
											"            name: `Test Comments Disabled User ${randomSuffix}`\r",
											"        })\r",
											"    }\r",
											"}, (err, response) => {\r",
											"    if (err) {\r",
											"        console.error(\"Pre-request: Не удалось создать пользователя:\", err);\r",
											"        throw new Error(\"Pre-request: Не удалось создать пользователя\");\r",
											"    }\r",
											"    if (response.code !== 201) {\r",
											"        console.error(\"Pre-request: Создание пользователя не удалось, статус \" + response.code + \":\", response.text());\r",
											"        throw new Error(`Pre-request: Создание пользователя не удалось, статус ${response.code}`);\r",
											"    }\r",
											"    const userData = response.json();\r",
											"    pm.environment.set(\"createdUserId\", userData.id);\r",
											"    console.log(\"Pre-request: Пользователь создан:\", userData.id);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/admin/categories`,\r",
											"        method: 'POST',\r",
											"        header: {'Content-Type': 'application/json'},\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                name: `Test Category For Comments Disabled ${randomSuffix}`\r",
											"            })\r",
											"        }\r",
											"    }, (errCat, responseCat) => {\r",
											"        if (errCat) {\r",
											"            console.error(\"Pre-request: Не удалось создать категорию:\", errCat);\r",
											"            throw new Error(\"Pre-request: Не удалось создать категорию\");\r",
											"        }\r",
											"        if (responseCat.code !== 201) {\r",
											"            console.error(\"Pre-request: Создание категории не удалось, статус \" + responseCat.code + \":\", responseCat.text());\r",
											"            throw new Error(`Pre-request: Создание категории не удалось, статус ${responseCat.code}`);\r",
											"        }\r",
											"        const categoryData = responseCat.json();\r",
											"        console.log(\"Pre-request: Категория создана:\", categoryData.id);\r",
											"\r",
											"        const eventDateForCreation = getFormattedFutureDate(3);\r",
											"\r",
											"        pm.sendRequest({\r",
											"            url: `${baseUrl}/users/${userData.id}/events`,\r",
											"            method: 'POST',\r",
											"            header: {'Content-Type': 'application/json'},\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    annotation: `Annotation for event with comments disabled ${randomSuffix}`,\r",
											"                    category: categoryData.id,\r",
											"                    description: `Detailed description for event with comments disabled ${randomSuffix}`,\r",
											"                    eventDate: eventDateForCreation,\r",
											"                    location: { lat: 55.753 + (randomSuffix / 1000000), lon: 37.614 + (randomSuffix / 1000000) },\r",
											"                    paid: false,\r",
											"                    participantLimit: 10,\r",
											"                    requestModeration: true,\r",
											"                    title: `Event with Comments Disabled ${randomSuffix}`,\r",
											"                    commentsEnabled: false\r",
											"                })\r",
											"            }\r",
											"        }, (errEvent, responseEvent) => {\r",
											"            if (errEvent) {\r",
											"                console.error(\"Pre-request: Не удалось создать событие:\", errEvent);\r",
											"                throw new Error(\"Pre-request: Не удалось создать событие\");\r",
											"            }\r",
											"            if (responseEvent.code !== 201) {\r",
											"                console.error(\"Pre-request: Создание события не удалось, статус \" + responseEvent.code + \":\", responseEvent.text());\r",
											"                throw new Error(`Pre-request: Создание события не удалось, статус ${responseEvent.code}`);\r",
											"            }\r",
											"            const eventData = responseEvent.json();\r",
											"            pm.environment.set(\"createdEventId\", eventData.id);\r",
											"            console.log(\"Pre-request: Событие (commentsEnabled:false) создано:\", eventData.id);\r",
											"\r",
											"            pm.sendRequest({\r",
											"                url: `${baseUrl}/admin/events/${eventData.id}`,\r",
											"                method: 'PATCH',\r",
											"                header: {'Content-Type': 'application/json'},\r",
											"                body: {\r",
											"                    mode: 'raw',\r",
											"                    raw: JSON.stringify({\r",
											"                        stateAction: \"PUBLISH_EVENT\"\r",
											"                    })\r",
											"                }\r",
											"            }, (errPublish, responsePublish) => {\r",
											"                if (errPublish) {\r",
											"                    console.error(\"Pre-request: Не удалось опубликовать событие:\", errPublish);\r",
											"                    throw new Error(\"Pre-request: Не удалось опубликовать событие\");\r",
											"                }\r",
											"                if (responsePublish.code !== 200) {\r",
											"                    console.error(\"Pre-request: Публикация события не удалась, статус \" + responsePublish.code + \":\", responsePublish.text());\r",
											"                    let errorMessage = responsePublish.text();\r",
											"                    try { const errorJson = JSON.parse(errorMessage); errorMessage = errorJson.message || errorMessage; } catch(e) {}\r",
											"                    throw new Error(`Pre-request: Публикация события не удалась, статус ${responsePublish.code}: ${errorMessage}`);\r",
											"                }\r",
											"                console.log(\"Pre-request: Событие опубликовано:\", eventData.id);\r",
											"\r",
											"                pm.environment.set(\"commentText\", `This comment should also fail ${randomSuffix}`);\r",
											"                console.log(\"Pre-request: Настройка для теста с отключенными комментариями завершена.\");\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 409 Conflict\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ является валидным JSON (для ApiError)\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Тело ответа содержит ожидаемые поля ошибки ApiError\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    pm.expect(jsonData).to.have.all.keys('status', 'reason', 'message', 'timestamp');\r",
											"    pm.expect(jsonData.status).to.equal(\"CONFLICT\");\r",
											"});\r",
											"\r",
											"pm.test(\"Поле 'reason' содержит общую причину ошибки\", function () {\r",
											"     pm.expect(jsonData.reason).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Timestamp ошибки присутствует и в правильном формате\", function () {\r",
											"    pm.expect(jsonData.timestamp).to.be.a('string');\r",
											"    pm.expect(jsonData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/);\r",
											"});\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"createdUserId\");\r",
											"    pm.environment.unset(\"createdEventId\");\r",
											"    pm.environment.unset(\"commentText\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"{{commentText}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{createdUserId}}/comments?eventId={{createdEventId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{createdUserId}}",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{createdEventId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария – Пустой текст – 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomSuffix = Math.floor(Math.random() * 100000);\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"function getFormattedFutureDate(hoursToAdd) {\r",
											"    const date = new Date();\r",
											"    date.setHours(date.getHours() + hoursToAdd);\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const seconds = String(date.getSeconds()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r",
											"}\r",
											"\r",
											"let createdUserIdInternal, createdEventIdInternal;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${baseUrl}/admin/users`, method: 'POST', header: {'Content-Type': 'application/json'},\r",
											"    body: { mode: 'raw', raw: JSON.stringify({\r",
											"        email: `testuser_empty_comm_text_${randomSuffix}@example.com`,\r",
											"        name: `TestUser EmptyCommText ${randomSuffix}`\r",
											"    })}\r",
											"}, (errUser, responseUser) => {\r",
											"    if (errUser || responseUser.code !== 201) {\r",
											"        console.error(\"Pre-request: Не удалось создать пользователя:\", errUser || responseUser.text());\r",
											"        throw new Error(\"Pre-request: Не удалось создать пользователя.\");\r",
											"    }\r",
											"    const userData = responseUser.json();\r",
											"    createdUserIdInternal = userData.id;\r",
											"    pm.environment.set(\"createdUserId\", createdUserIdInternal);\r",
											"    console.log(\"Pre-request: Пользователь создан:\", createdUserIdInternal);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/admin/categories`,\r",
											"        method: 'POST',\r",
											"        header: {'Content-Type': 'application/json'},\r",
											"        body: { mode: 'raw', raw: JSON.stringify({ name: `Category EmptyCommText ${randomSuffix}` }) }\r",
											"     }, (errCat, responseCat) => {\r",
											"        if (errCat || responseCat.code !== 201) {\r",
											"            console.error(\"Pre-request: Не удалось создать категорию:\", errCat || responseCat.text());\r",
											"            throw new Error(\"Pre-request: Не удалось создать категорию.\");\r",
											"        }\r",
											"        const categoryData = responseCat.json();\r",
											"        console.log(\"Pre-request: Категория создана:\", categoryData.id);\r",
											"\r",
											"        pm.sendRequest({\r",
											"            url: `${baseUrl}/users/${createdUserIdInternal}/events`,\r",
											"            method: 'POST',\r",
											"            header: {'Content-Type': 'application/json'},\r",
											"            body: { mode: 'raw', raw: JSON.stringify({\r",
											"                title: `Event EmptyCommText ${randomSuffix}`,\r",
											"                annotation: `Annotation with sufficient length ${randomSuffix}`, category: categoryData.id, description: `Description with sufficient length ${randomSuffix}`,\r",
											"                eventDate: getFormattedFutureDate(3), location: { lat: 55.74, lon: 37.64 }, commentsEnabled: true\r",
											"            })}\r",
											"        }, (errEvent, responseEvent) => {\r",
											"            if (errEvent || responseEvent.code !== 201) {\r",
											"                console.error(\"Pre-request: Не удалось создать событие:\", errEvent || responseEvent.text());\r",
											"                throw new Error(\"Pre-request: Не удалось создать событие.\");\r",
											"            }\r",
											"            const eventData = responseEvent.json();\r",
											"            createdEventIdInternal = eventData.id;\r",
											"            pm.environment.set(\"createdEventId\", createdEventIdInternal);\r",
											"            console.log(\"Pre-request: Событие создано:\", createdEventIdInternal);\r",
											"\r",
											"            pm.sendRequest({\r",
											"                url: `${baseUrl}/admin/events/${createdEventIdInternal}`, method: 'PATCH',\r",
											"                header: {'Content-Type': 'application/json'}, body: { mode: 'raw', raw: JSON.stringify({ stateAction: \"PUBLISH_EVENT\" })}\r",
											"            }, (errPublish, responsePublish) => {\r",
											"                if (errPublish || responsePublish.code !== 200) {\r",
											"                    console.error(\"Pre-request: Не удалось опубликовать событие:\", errPublish || responsePublish.text());\r",
											"                    throw new Error(\"Pre-request: Не удалось опубликовать событие.\");\r",
											"                }\r",
											"                console.log(\"Pre-request: Событие опубликовано:\", createdEventIdInternal);\r",
											"                console.log(\"Pre-request: Настройка для POST комментария с пустым текстом завершена.\");\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ является валидным JSON (для ApiError)\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Тело ответа содержит ожидаемые поля ошибки ApiError (без 'errors')\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    pm.expect(jsonData).to.have.all.keys('status', 'reason', 'message', 'timestamp', 'errors');\r",
											"    pm.expect(jsonData.status).to.equal(\"BAD_REQUEST\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение об ошибке (message) не пустое и указывает на проблему с полем 'text'\", function () {\r",
											"    pm.expect(jsonData.message).to.not.be.empty;\r",
											"    console.log(\"Сообщение об ошибке: \", jsonData.message);\r",
											"});\r",
											"\r",
											"pm.test(\"Поле 'reason' (причина ошибки) не пустое\", function () {\r",
											"    pm.expect(jsonData.reason).to.not.be.empty;\r",
											"    console.log(\"Причина ошибки: \", jsonData.reason);\r",
											"});\r",
											"\r",
											"pm.test(\"Timestamp ошибки присутствует и в правильном формате\", function () {\r",
											"    pm.expect(jsonData.timestamp).to.be.a('string');\r",
											"    pm.expect(jsonData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/);\r",
											"});\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"createdUserId\");\r",
											"    pm.environment.unset(\"createdEventId\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{createdUserId}}/comments?eventId={{createdEventId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{createdUserId}}",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{createdEventId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Изменение комментария",
					"item": [
						{
							"name": "Изменение комментария – Успех – 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomSuffix = Math.floor(Math.random() * 100000);\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"const delayMilliseconds = 1000;\r",
											"\r",
											"function getFormattedFutureDate(hoursToAdd) {\r",
											"    const date = new Date();\r",
											"    date.setHours(date.getHours() + hoursToAdd);\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const seconds = String(date.getSeconds()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${baseUrl}/admin/users`,\r",
											"    method: 'POST',\r",
											"    header: {'Content-Type': 'application/json'},\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: `testuser_comment_updater_delay_${randomSuffix}@example.com`,\r",
											"            name: `Test Comment Updater Delay ${randomSuffix}`\r",
											"        })\r",
											"    }\r",
											"}, (errUser, responseUser) => {\r",
											"    if (errUser) {\r",
											"        console.error(\"Pre-request: Не удалось создать пользователя:\", errUser);\r",
											"        throw new Error(\"Pre-request: Не удалось создать пользователя\");\r",
											"    }\r",
											"    if (responseUser.code !== 201) {\r",
											"        console.error(\"Pre-request: Создание пользователя не удалось, статус \" + responseUser.code + \":\", responseUser.text());\r",
											"        throw new Error(`Pre-request: Создание пользователя не удалось, статус ${responseUser.code}`);\r",
											"    }\r",
											"    const userData = responseUser.json();\r",
											"    pm.environment.set(\"createdUserId\", userData.id);\r",
											"    pm.environment.set(\"createdUserName\", userData.name);\r",
											"    console.log(\"Pre-request: Пользователь создан:\", userData.id);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/admin/categories`,\r",
											"        method: 'POST',\r",
											"        header: {'Content-Type': 'application/json'},\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                name: `Test Category For Update Comment Delay ${randomSuffix}`\r",
											"            })\r",
											"        }\r",
											"    }, (errCat, responseCat) => {\r",
											"        if (errCat) {\r",
											"            console.error(\"Pre-request: Не удалось создать категорию:\", errCat);\r",
											"            throw new Error(\"Pre-request: Не удалось создать категорию\");\r",
											"        }\r",
											"        if (responseCat.code !== 201) {\r",
											"            console.error(\"Pre-request: Создание категории не удалось, статус \" + responseCat.code + \":\", responseCat.text());\r",
											"            throw new Error(`Pre-request: Создание категории не удалось, статус ${responseCat.code}`);\r",
											"        }\r",
											"        const categoryData = responseCat.json();\r",
											"        console.log(\"Pre-request: Категория создана:\", categoryData.id);\r",
											"\r",
											"        const eventDateForCreation = getFormattedFutureDate(3);\r",
											"\r",
											"        pm.sendRequest({\r",
											"            url: `${baseUrl}/users/${userData.id}/events`,\r",
											"            method: 'POST',\r",
											"            header: {'Content-Type': 'application/json'},\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    annotation: `Annotation for event to update comment delay ${randomSuffix}`,\r",
											"                    category: categoryData.id,\r",
											"                    description: `Detailed description for event to update comment delay ${randomSuffix}`,\r",
											"                    eventDate: eventDateForCreation,\r",
											"                    location: { lat: 55.7541 + (randomSuffix / 1000000), lon: 37.6151 + (randomSuffix / 1000000) },\r",
											"                    paid: false,\r",
											"                    participantLimit: 10,\r",
											"                    requestModeration: true,\r",
											"                    title: `Event for Comment Update Delay ${randomSuffix}`,\r",
											"                    commentsEnabled: true\r",
											"                })\r",
											"            }\r",
											"        }, (errEvent, responseEvent) => {\r",
											"            if (errEvent) {\r",
											"                console.error(\"Pre-request: Не удалось создать событие:\", errEvent);\r",
											"                throw new Error(\"Pre-request: Не удалось создать событие\");\r",
											"            }\r",
											"            if (responseEvent.code !== 201) {\r",
											"                console.error(\"Pre-request: Создание события не удалось, статус \" + responseEvent.code + \":\", responseEvent.text());\r",
											"                throw new Error(`Pre-request: Создание события не удалось, статус ${responseEvent.code}`);\r",
											"            }\r",
											"            const eventData = responseEvent.json();\r",
											"            pm.environment.set(\"createdEventId\", eventData.id);\r",
											"            console.log(\"Pre-request: Событие создано:\", eventData.id);\r",
											"\r",
											"            pm.sendRequest({\r",
											"                url: `${baseUrl}/admin/events/${eventData.id}`,\r",
											"                method: 'PATCH',\r",
											"                header: {'Content-Type': 'application/json'},\r",
											"                body: {\r",
											"                    mode: 'raw',\r",
											"                    raw: JSON.stringify({ stateAction: \"PUBLISH_EVENT\" })\r",
											"                }\r",
											"            }, (errPublish, responsePublish) => {\r",
											"                if (errPublish) {\r",
											"                    console.error(\"Pre-request: Не удалось опубликовать событие:\", errPublish);\r",
											"                    throw new Error(\"Pre-request: Не удалось опубликовать событие\");\r",
											"                }\r",
											"                if (responsePublish.code !== 200) {\r",
											"                    console.error(\"Pre-request: Публикация события не удалась, статус \" + responsePublish.code + \":\", responsePublish.text());\r",
											"                    throw new Error(`Pre-request: Публикация события не удалась, статус ${responsePublish.code}`);\r",
											"                }\r",
											"                console.log(\"Pre-request: Событие опубликовано:\", eventData.id);\r",
											"\r",
											"                const initialCommentText = `Initial comment to be updated (delay) ${randomSuffix}`;\r",
											"                pm.sendRequest({\r",
											"                    url: `${baseUrl}/users/${userData.id}/comments?eventId=${eventData.id}`,\r",
											"                    method: 'POST',\r",
											"                    header: {'Content-Type': 'application/json'},\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({ text: initialCommentText })\r",
											"                    }\r",
											"                }, (errComment, responseComment) => {\r",
											"                    if (errComment) {\r",
											"                        console.error(\"Pre-request: Не удалось создать первоначальный комментарий:\", errComment);\r",
											"                        throw new Error(\"Pre-request: Не удалось создать первоначальный комментарий\");\r",
											"                    }\r",
											"                    if (responseComment.code !== 201) {\r",
											"                        console.error(\"Pre-request: Создание первоначального комментария не удалось, статус \" + responseComment.code + \":\", responseComment.text());\r",
											"                        throw new Error(`Pre-request: Создание первоначального комментария не удалось, статус ${responseComment.code}`);\r",
											"                    }\r",
											"                    const commentData = responseComment.json();\r",
											"                    pm.environment.set(\"createdCommentId\", commentData.id);\r",
											"                    console.log(\"Pre-request: Первоначальный комментарий создан:\", commentData.id);\r",
											"\r",
											"                    console.log(`Pre-request: Ожидание ${delayMilliseconds}мс перед отправкой запроса на обновление...`);\r",
											"                    setTimeout(function() {\r",
											"                        pm.environment.set(\"updatedCommentText\", `This is the UPDATED comment text (delay) ${randomSuffix}`);\r",
											"                        console.log(\"Pre-request: Настройка для успешного обновления комментария (с задержкой) завершена. Основной запрос будет отправлен сейчас.\");\r",
											"                    }, delayMilliseconds);\r",
											"                });\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ является валидным JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"const expectedUserId = parseInt(pm.environment.get(\"createdUserId\"));\r",
											"const expectedUserName = pm.environment.get(\"createdUserName\");\r",
											"const expectedEventId = parseInt(pm.environment.get(\"createdEventId\"));\r",
											"const expectedUpdatedText = pm.environment.get(\"updatedCommentText\");\r",
											"const expectedCommentId = parseInt(pm.environment.get(\"createdCommentId\"));\r",
											"\r",
											"pm.test(\"ID комментария в ответе совпадает с обновляемым ID\", function () {\r",
											"    pm.expect(jsonData.id).to.equal(expectedCommentId);\r",
											"});\r",
											"\r",
											"pm.test(\"Текст комментария обновлен на новый\", function () {\r",
											"    pm.expect(jsonData.text).to.equal(expectedUpdatedText);\r",
											"});\r",
											"\r",
											"pm.test(\"ID автора совпадает с ID создавшего пользователя\", function () {\r",
											"    pm.expect(jsonData.author).to.be.an('object');\r",
											"    pm.expect(jsonData.author.id).to.equal(expectedUserId);\r",
											"});\r",
											"\r",
											"pm.test(\"Имя автора совпадает с именем создавшего пользователя\", function () {\r",
											"    pm.expect(jsonData.author.name).to.equal(expectedUserName);\r",
											"});\r",
											"\r",
											"pm.test(\"ID события совпадает с ID события, к которому относится комментарий\", function () {\r",
											"    pm.expect(jsonData.eventId).to.equal(expectedEventId);\r",
											"});\r",
											"\r",
											"pm.test(\"Поле 'createdOn' присутствует и имеет корректный формат\", function () {\r",
											"    pm.expect(jsonData.createdOn).to.be.a('string');\r",
											"    pm.expect(jsonData.createdOn).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/);\r",
											"});\r",
											"\r",
											"pm.test(\"Поле 'updatedOn' содержит дату позднее 'createdOn'\", function () {\r",
											"    pm.expect(jsonData.updatedOn).to.be.a('string');\r",
											"    pm.expect(jsonData.updatedOn).to.not.be.null;\r",
											"    pm.expect(jsonData.updatedOn).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/);\r",
											"    const createdDate = new Date(jsonData.createdOn.replace(' ', 'T') + 'Z');\r",
											"    const updatedDate = new Date(jsonData.updatedOn.replace(' ', 'T') + 'Z');\r",
											"    pm.expect(updatedDate.getTime()).to.be.greaterThan(createdDate.getTime());\r",
											"});\r",
											"\r",
											"pm.test(\"Флаг 'isEdited' установлен в true (после обновления)\", function () {\r",
											"    pm.expect(jsonData.isEdited).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"createdUserId\");\r",
											"    pm.environment.unset(\"createdUserName\");\r",
											"    pm.environment.unset(\"createdEventId\");\r",
											"    pm.environment.unset(\"createdCommentId\");\r",
											"    pm.environment.unset(\"updatedCommentText\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"{{updatedCommentText}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{createdUserId}}/comments/{{createdCommentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{createdUserId}}",
										"comments",
										"{{createdCommentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменение комментария – Несуществующий комментарий – 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomSuffix = Math.floor(Math.random() * 100000);\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${baseUrl}/admin/users`,\r",
											"    method: 'POST',\r",
											"    header: {'Content-Type': 'application/json'},\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: `testuser_nonexistent_comment_patch_${randomSuffix}@example.com`,\r",
											"            name: `Test NonExistent Comment User ${randomSuffix}`\r",
											"        })\r",
											"    }\r",
											"}, (errUser, responseUser) => {\r",
											"    if (errUser) {\r",
											"        console.error(\"Pre-request: Не удалось создать пользователя:\", errUser);\r",
											"        throw new Error(\"Pre-request: Не удалось создать пользователя\");\r",
											"    }\r",
											"    if (responseUser.code !== 201) {\r",
											"        console.error(\"Pre-request: Создание пользователя не удалось, статус \" + responseUser.code + \":\", responseUser.text());\r",
											"        throw new Error(`Pre-request: Создание пользователя не удалось, статус ${responseUser.code}`);\r",
											"    }\r",
											"    const userData = responseUser.json();\r",
											"    pm.environment.set(\"createdUserId\", userData.id);\r",
											"    console.log(\"Pre-request: Пользователь создан:\", userData.id);\r",
											"\r",
											"    const nonExistentCommentId = Math.floor(Math.random() * 1000000) + 9000000;\r",
											"    pm.environment.set(\"nonExistentCommentId\", nonExistentCommentId);\r",
											"    console.log(\"Pre-request: Установлен ID несуществующего комментария:\", nonExistentCommentId);\r",
											"\r",
											"    pm.environment.set(\"updatedCommentText\", `Attempt to update non-existent comment ${randomSuffix}`);\r",
											"    console.log(\"Pre-request: Настройка для обновления несуществующего комментария завершена.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ является валидным JSON (для ApiError)\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"const expectedNonExistentCommentId = pm.environment.get(\"nonExistentCommentId\");\r",
											"\r",
											"pm.test(\"Тело ответа содержит ожидаемые поля ошибки ApiError (без 'errors')\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    pm.expect(jsonData).to.have.all.keys('status', 'reason', 'message', 'timestamp');\r",
											"    pm.expect(jsonData.status).to.equal(\"NOT_FOUND\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение об ошибке (message) не пустое\", function () {\r",
											"    pm.expect(jsonData.message).to.not.be.empty;\r",
											"    console.log(\"Сообщение об ошибке: \", jsonData.message);\r",
											"});\r",
											"\r",
											"pm.test(\"Поле 'reason' (причина ошибки) не пустое\", function () {\r",
											"    pm.expect(jsonData.reason).to.not.be.empty;\r",
											"    console.log(\"Причина ошибки: \", jsonData.reason);\r",
											"});\r",
											"\r",
											"pm.test(\"Timestamp ошибки присутствует и в правильном формате\", function () {\r",
											"    pm.expect(jsonData.timestamp).to.be.a('string');\r",
											"    pm.expect(jsonData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/);\r",
											"});\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"createdUserId\");\r",
											"    pm.environment.unset(\"nonExistentCommentId\");\r",
											"    pm.environment.unset(\"updatedCommentText\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"{{updatedCommentText}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{createdUserId}}/comments/{{nonExistentCommentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{createdUserId}}",
										"comments",
										"{{nonExistentCommentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменение комментария – Чужой комментарий – 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomSuffix = Math.floor(Math.random() * 100000);\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"function getFormattedFutureDate(hoursToAdd) {\r",
											"    const date = new Date();\r",
											"    date.setHours(date.getHours() + hoursToAdd);\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const seconds = String(date.getSeconds()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r",
											"}\r",
											"\r",
											"let victimUserId, attackerUserId, eventIdForComment;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${baseUrl}/admin/users`,\r",
											"    method: 'POST',\r",
											"    header: {'Content-Type': 'application/json'},\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: `victim_user_patch_${randomSuffix}@example.com`,\r",
											"            name: `Victim User Patch ${randomSuffix}`\r",
											"        })\r",
											"    }\r",
											"}, (errVictim, responseVictim) => {\r",
											"    if (errVictim || responseVictim.code !== 201) {\r",
											"        console.error(\"Pre-request: Не удалось создать Victim User:\", errVictim || responseVictim.text());\r",
											"        throw new Error(\"Pre-request: Не удалось создать Victim User. Status: \" + (responseVictim ? responseVictim.code : \"N/A\"));\r",
											"    }\r",
											"    const victimUserData = responseVictim.json();\r",
											"    victimUserId = victimUserData.id;\r",
											"    console.log(\"Pre-request: Victim User создан:\", victimUserId);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/admin/users`,\r",
											"        method: 'POST',\r",
											"        header: {'Content-Type': 'application/json'},\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                email: `attacker_user_patch_${randomSuffix}@example.com`,\r",
											"                name: `Attacker User Patch ${randomSuffix}`\r",
											"            })\r",
											"        }\r",
											"    }, (errAttacker, responseAttacker) => {\r",
											"        if (errAttacker || responseAttacker.code !== 201) {\r",
											"            console.error(\"Pre-request: Не удалось создать Attacker User:\", errAttacker || responseAttacker.text());\r",
											"            throw new Error(\"Pre-request: Не удалось создать Attacker User. Status: \" + (responseAttacker ? responseAttacker.code : \"N/A\"));\r",
											"        }\r",
											"        const attackerUserData = responseAttacker.json();\r",
											"        attackerUserId = attackerUserData.id;\r",
											"        pm.environment.set(\"attackerUserId\", attackerUserId);\r",
											"        console.log(\"Pre-request: Attacker User создан:\", attackerUserId);\r",
											"\r",
											"        pm.sendRequest({\r",
											"            url: `${baseUrl}/admin/categories`,\r",
											"            method: 'POST',\r",
											"            header: {'Content-Type': 'application/json'},\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({ name: `Category for Foreign Comment Patch ${randomSuffix}` })\r",
											"            }\r",
											"        }, (errCat, responseCat) => {\r",
											"            if (errCat || responseCat.code !== 201) {\r",
											"                console.error(\"Pre-request: Не удалось создать категорию:\", errCat || responseCat.text());\r",
											"                throw new Error(\"Pre-request: Не удалось создать категорию. Status: \" + (responseCat ? responseCat.code : \"N/A\"));\r",
											"            }\r",
											"            const categoryData = responseCat.json();\r",
											"            console.log(\"Pre-request: Категория создана:\", categoryData.id);\r",
											"\r",
											"            const eventDateForCreation = getFormattedFutureDate(3);\r",
											"            pm.sendRequest({\r",
											"                url: `${baseUrl}/users/${victimUserId}/events`,\r",
											"                method: 'POST',\r",
											"                header: {'Content-Type': 'application/json'},\r",
											"                body: {\r",
											"                    mode: 'raw',\r",
											"                    raw: JSON.stringify({\r",
											"                        annotation: `Event for foreign comment patch test ${randomSuffix}`,\r",
											"                        category: categoryData.id,\r",
											"                        description: `Description for foreign comment patch test ${randomSuffix}`,\r",
											"                        eventDate: eventDateForCreation,\r",
											"                        location: { lat: 55.755 + (randomSuffix / 1000000), lon: 37.616 + (randomSuffix / 1000000) },\r",
											"                        commentsEnabled: true,\r",
											"                        title: `Event Foreign Patch ${randomSuffix}`\r",
											"                    })\r",
											"                }\r",
											"            }, (errEvent, responseEvent) => {\r",
											"                if (errEvent || responseEvent.code !== 201) {\r",
											"                    console.error(\"Pre-request: Не удалось создать событие:\", errEvent || responseEvent.text());\r",
											"                    throw new Error(\"Pre-request: Не удалось создать событие. Status: \" + (responseEvent ? responseEvent.code : \"N/A\"));\r",
											"                }\r",
											"                const eventData = responseEvent.json();\r",
											"                eventIdForComment = eventData.id;\r",
											"                console.log(\"Pre-request: Событие создано:\", eventIdForComment);\r",
											"\r",
											"                pm.sendRequest({\r",
											"                    url: `${baseUrl}/admin/events/${eventIdForComment}`,\r",
											"                    method: 'PATCH',\r",
											"                    header: {'Content-Type': 'application/json'},\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({ stateAction: \"PUBLISH_EVENT\" })\r",
											"                    }\r",
											"                }, (errPublish, responsePublish) => {\r",
											"                    if (errPublish || responsePublish.code !== 200) {\r",
											"                        console.error(\"Pre-request: Не удалось опубликовать событие:\", errPublish || responsePublish.text());\r",
											"                        throw new Error(\"Pre-request: Не удалось опубликовать событие. Status: \" + (responsePublish ? responsePublish.code : \"N/A\"));\r",
											"                    }\r",
											"                    console.log(\"Pre-request: Событие опубликовано:\", eventIdForComment);\r",
											"\r",
											"                    const victimCommentText = `This is Victim User's comment ${randomSuffix}`;\r",
											"                    pm.sendRequest({\r",
											"                        url: `${baseUrl}/users/${victimUserId}/comments?eventId=${eventIdForComment}`,\r",
											"                        method: 'POST',\r",
											"                        header: {'Content-Type': 'application/json'},\r",
											"                        body: {\r",
											"                            mode: 'raw',\r",
											"                            raw: JSON.stringify({ text: victimCommentText })\r",
											"                        }\r",
											"                    }, (errComment, responseComment) => {\r",
											"                        if (errComment || responseComment.code !== 201) {\r",
											"                            console.error(\"Pre-request: Не удалось создать комментарий Victim User:\", errComment || responseComment.text());\r",
											"                            throw new Error(\"Pre-request: Не удалось создать комментарий Victim User. Status: \" + (responseComment ? responseComment.code : \"N/A\"));\r",
											"                        }\r",
											"                        const victimCommentData = responseComment.json();\r",
											"                        pm.environment.set(\"victimCommentId\", victimCommentData.id);\r",
											"                        console.log(\"Pre-request: Комментарий Victim User создан:\", victimCommentData.id);\r",
											"\r",
											"                        pm.environment.set(\"updatedCommentText\", `Attacker's attempt to update ${randomSuffix}`);\r",
											"                        console.log(\"Pre-request: Настройка для обновления чужого комментария завершена.\");\r",
											"                    });\r",
											"                });\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ является валидным JSON (для ApiError)\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"const victimCommentId = pm.environment.get(\"victimCommentId\");\r",
											"\r",
											"pm.test(\"Тело ответа содержит ожидаемые поля ошибки ApiError (без 'errors')\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    pm.expect(jsonData).to.have.all.keys('status', 'reason', 'message', 'timestamp');\r",
											"    pm.expect(jsonData.status).to.equal(\"NOT_FOUND\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение об ошибке (message) не пустое\", function () {\r",
											"    pm.expect(jsonData.message).to.not.be.empty;\r",
											"    console.log(\"Сообщение об ошибке: \", jsonData.message);\r",
											"});\r",
											"\r",
											"pm.test(\"Поле 'reason' (причина ошибки) не пустое\", function () {\r",
											"    pm.expect(jsonData.reason).to.not.be.empty;\r",
											"    console.log(\"Причина ошибки: \", jsonData.reason);\r",
											"});\r",
											"\r",
											"pm.test(\"Timestamp ошибки присутствует и в правильном формате\", function () {\r",
											"    pm.expect(jsonData.timestamp).to.be.a('string');\r",
											"    pm.expect(jsonData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/);\r",
											"});\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"attackerUserId\");\r",
											"    pm.environment.unset(\"victimCommentId\");\r",
											"    pm.environment.unset(\"updatedCommentText\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"{{updatedCommentText}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{attackerUserId}}/comments/{{victimCommentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{attackerUserId}}",
										"comments",
										"{{victimCommentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Получение собственных комментариев",
					"item": [
						{
							"name": "Получение собственных комментариев – Успех – 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomSuffix = Math.floor(Math.random() * 100000);\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"const numberOfCommentsToCreate = 5;\r",
											"const fromParam = 0;\r",
											"const sizeParam = 3;\r",
											"\r",
											"function getFormattedFutureDate(hoursToAdd) {\r",
											"    const date = new Date();\r",
											"    date.setHours(date.getHours() + hoursToAdd);\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const seconds = String(date.getSeconds()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r",
											"}\r",
											"\r",
											"let createdUserIdInternal;\r",
											"let createdEventIds = [];\r",
											"let createdCommentDetails = [];\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${baseUrl}/admin/users`,\r",
											"    method: 'POST',\r",
											"    header: {'Content-Type': 'application/json'},\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: `testuser_get_comments_${randomSuffix}@example.com`,\r",
											"            name: `Test User Get Comments ${randomSuffix}`\r",
											"        })\r",
											"    }\r",
											"}, (errUser, responseUser) => {\r",
											"    if (errUser || responseUser.code !== 201) {\r",
											"        console.error(\"Pre-request: Не удалось создать пользователя:\", errUser || responseUser.text());\r",
											"        throw new Error(\"Pre-request: Не удалось создать пользователя. Status: \" + (responseUser ? responseUser.code : \"N/A\"));\r",
											"    }\r",
											"    const userData = responseUser.json();\r",
											"    createdUserIdInternal = userData.id;\r",
											"    pm.environment.set(\"createdUserId\", createdUserIdInternal);\r",
											"    pm.environment.set(\"createdUserName\", userData.name);\r",
											"    console.log(\"Pre-request: Пользователь создан:\", createdUserIdInternal);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/admin/categories`,\r",
											"        method: 'POST',\r",
											"        header: {'Content-Type': 'application/json'},\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ name: `Category for Get Comments ${randomSuffix}` })\r",
											"        }\r",
											"    }, (errCat, responseCat) => {\r",
											"        if (errCat || responseCat.code !== 201) {\r",
											"            console.error(\"Pre-request: Не удалось создать категорию:\", errCat || responseCat.text());\r",
											"            throw new Error(\"Pre-request: Не удалось создать категорию. Status: \" + (responseCat ? responseCat.code : \"N/A\"));\r",
											"        }\r",
											"        const categoryData = responseCat.json();\r",
											"        console.log(\"Pre-request: Категория создана:\", categoryData.id);\r",
											"\r",
											"        let eventsCreatedCount = 0;\r",
											"        const numberOfEvents = 2;\r",
											"        for (let i = 0; i < numberOfEvents; i++) {\r",
											"            const eventDateForCreation = getFormattedFutureDate(3 + i);\r",
											"            pm.sendRequest({\r",
											"                url: `${baseUrl}/users/${createdUserIdInternal}/events`,\r",
											"                method: 'POST',\r",
											"                header: {'Content-Type': 'application/json'},\r",
											"                body: {\r",
											"                    mode: 'raw',\r",
											"                    raw: JSON.stringify({\r",
											"                        annotation: `Event ${i} for get comments test ${randomSuffix}`,\r",
											"                        category: categoryData.id,\r",
											"                        description: `Description for event ${i} ${randomSuffix}`,\r",
											"                        eventDate: eventDateForCreation,\r",
											"                        location: { lat: 55.756 + i * 0.001 + (randomSuffix / 1000000), lon: 37.617 + i * 0.001 + (randomSuffix / 1000000) },\r",
											"                        commentsEnabled: true,\r",
											"                        title: `Event ${i} Get Comments ${randomSuffix}`\r",
											"                    })\r",
											"                }\r",
											"            }, (errEvent, responseEvent) => {\r",
											"                if (errEvent || responseEvent.code !== 201) {\r",
											"                    console.error(`Pre-request: Не удалось создать событие ${i}:`, errEvent || responseEvent.text());\r",
											"                    throw new Error(`Pre-request: Не удалось создать событие ${i}. Status: ` + (responseEvent ? responseEvent.code : \"N/A\"));\r",
											"                }\r",
											"                const eventData = responseEvent.json();\r",
											"                createdEventIds.push(eventData.id);\r",
											"                console.log(`Pre-request: Событие ${i} создано:`, eventData.id);\r",
											"\r",
											"                pm.sendRequest({\r",
											"                    url: `${baseUrl}/admin/events/${eventData.id}`,\r",
											"                    method: 'PATCH',\r",
											"                    header: {'Content-Type': 'application/json'},\r",
											"                    body: { mode: 'raw', raw: JSON.stringify({ stateAction: \"PUBLISH_EVENT\" }) }\r",
											"                }, (errPublish, responsePublish) => {\r",
											"                    if (errPublish || responsePublish.code !== 200) {\r",
											"                        console.error(`Pre-request: Не удалось опубликовать событие ${eventData.id}:`, errPublish || responsePublish.text());\r",
											"                        throw new Error(`Pre-request: Не удалось опубликовать событие ${eventData.id}.`);\r",
											"                    }\r",
											"                    console.log(`Pre-request: Событие ${eventData.id} опубликовано.`);\r",
											"                    eventsCreatedCount++;\r",
											"                    if (eventsCreatedCount === numberOfEvents) {\r",
											"                        createComments();\r",
											"                    }\r",
											"                });\r",
											"            });\r",
											"        }\r",
											"\r",
											"        function createComments() {\r",
											"            let commentsCreatedCount = 0;\r",
											"            function createCommentRecursive(j) {\r",
											"                if (j >= numberOfCommentsToCreate) {\r",
											"                    createdCommentDetails.sort((a, b) => {\r",
											"                            const dateA = new Date(a.createdOn.replace(' ', 'T') + 'Z').getTime();\r",
											"                            const dateB = new Date(b.createdOn.replace(' ', 'T') + 'Z').getTime();\r",
											"                            if (dateB !== dateA) return dateB - dateA;\r",
											"                            return b.id - a.id;\r",
											"                        });\r",
											"                    pm.environment.set(\"expectedCommentDetails\", JSON.stringify(createdCommentDetails));\r",
											"                    pm.environment.set(\"fromParam\", String(fromParam));\r",
											"                    pm.environment.set(\"sizeParam\", String(sizeParam));\r",
											"                    console.log(\"Pre-request: Настройка для получения комментариев пользователя завершена.\");\r",
											"                    return;\r",
											"                }\r",
											"\r",
											"                const commentText = `User's comment ${j} on event ${j % numberOfEvents} ${randomSuffix}`;\r",
											"                const eventIdForThisComment = createdEventIds[j % numberOfEvents];\r",
											"\r",
											"                setTimeout(() => {\r",
											"                    pm.sendRequest({\r",
											"                        url: `${baseUrl}/users/${createdUserIdInternal}/comments?eventId=${eventIdForThisComment}`,\r",
											"                        method: 'POST',\r",
											"                        header: {'Content-Type': 'application/json'},\r",
											"                        body: {\r",
											"                            mode: 'raw',\r",
											"                            raw: JSON.stringify({ text: commentText })\r",
											"                        }\r",
											"                    }, (errComment, responseComment) => {\r",
											"                        if (errComment || responseComment.code !== 201) {\r",
											"                            console.error(`Pre-request: Не удалось создать комментарий ${j}:`, errComment || responseComment.text());\r",
											"                            throw new Error(`Pre-request: Не удалось создать комментарий ${j}.`);\r",
											"                        }\r",
											"                        const commentData = responseComment.json();\r",
											"                        createdCommentDetails.push({\r",
											"                            id: commentData.id,\r",
											"                            text: commentData.text,\r",
											"                            eventId: commentData.eventId,\r",
											"                            createdOn: commentData.createdOn\r",
											"                        });\r",
											"                        console.log(`Pre-request: Комментарий ${j} создан:`, commentData.id, `в ${commentData.createdOn}`);\r",
											"                        \r",
											"                        commentsCreatedCount++;\r",
											"                        createCommentRecursive(j + 1);\r",
											"                    });\r",
											"                }, 50);\r",
											"            }\r",
											"            createCommentRecursive(0);\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ является валидным JSON и представляет собой массив\", function () {\r",
											"    pm.response.to.be.json;\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"const expectedSize = parseInt(pm.environment.get(\"sizeParam\"));\r",
											"const allExpectedComments = JSON.parse(pm.environment.get(\"expectedCommentDetails\"));\r",
											"const expectedUserId = parseInt(pm.environment.get(\"createdUserId\"));\r",
											"const expectedUserName = pm.environment.get(\"createdUserName\");\r",
											"\r",
											"const expectedReturnedCount = Math.min(expectedSize, allExpectedComments.length - parseInt(pm.environment.get(\"fromParam\")));\r",
											"\r",
											"\r",
											"pm.test(`Возвращено корректное количество комментариев (ожидается ${expectedReturnedCount})`, function () {\r",
											"    pm.expect(jsonData.length).to.equal(expectedReturnedCount);\r",
											"});\r",
											"\r",
											"if (jsonData.length > 0) {\r",
											"    pm.test(\"Структура каждого комментария в ответе корректна\", function () {\r",
											"        jsonData.forEach(function(comment, index) {\r",
											"            pm.expect(comment, `Комментарий #${index}`).to.have.all.keys(\r",
											"                'id', 'text', 'author', 'eventId', 'createdOn', 'updatedOn', 'isEdited'\r",
											"            );\r",
											"            pm.expect(comment.id, `ID комментария #${index}`).to.be.a('number');\r",
											"            pm.expect(comment.text, `Текст комментария #${index}`).to.be.a('string');\r",
											"            pm.expect(comment.author, `Автор комментария #${index}`).to.be.an('object');\r",
											"            pm.expect(comment.author.id, `ID автора комментария #${index}`).to.equal(expectedUserId);\r",
											"            pm.expect(comment.author.name, `Имя автора комментария #${index}`).to.equal(expectedUserName);\r",
											"            pm.expect(comment.eventId, `ID события комментария #${index}`).to.be.a('number');\r",
											"            pm.expect(comment.createdOn, `Время создания комментария #${index}`).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/);\r",
											"            pm.expect(comment.isEdited, `Флаг isEdited комментария #${index}`).to.be.a('boolean');\r",
											"        });\r",
											"    });\r",
											"\r",
											"    pm.test(\"Комментарии соответствуют ожидаемым (с учетом пагинации и сортировки)\", function() {\r",
											"        const from = parseInt(pm.environment.get(\"fromParam\"));\r",
											"        const size = parseInt(pm.environment.get(\"sizeParam\"));\r",
											"        const expectedSlice = allExpectedComments.slice(from, from + size);\r",
											"\r",
											"        pm.expect(jsonData.length).to.equal(expectedSlice.length);\r",
											"\r",
											"        jsonData.forEach((returnedComment, index) => {\r",
											"            const expectedComment = expectedSlice[index];\r",
											"            pm.expect(returnedComment.id, `ID комментария ${index}`).to.equal(expectedComment.id);\r",
											"            pm.expect(returnedComment.text, `Текст комментария ${index}`).to.equal(expectedComment.text);\r",
											"            pm.expect(returnedComment.eventId, `EventID комментария ${index}`).to.equal(expectedComment.eventId);\r",
											"        });\r",
											"    });\r",
											"} else if (expectedReturnedCount > 0) {\r",
											"    pm.test(\"Ожидались комментарии, но получен пустой массив\", function() {\r",
											"        pm.expect.fail(\"Ожидались комментарии, но массив пуст.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"createdUserId\");\r",
											"    pm.environment.unset(\"createdUserName\");\r",
											"    pm.environment.unset(\"fromParam\");\r",
											"    pm.environment.unset(\"sizeParam\");\r",
											"    pm.environment.unset(\"expectedCommentDetails\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{createdUserId}}/comments?from={{fromParam}}&size={{sizeParam}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{createdUserId}}",
										"comments"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromParam}}"
										},
										{
											"key": "size",
											"value": "{{sizeParam}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Удаление комментария",
					"item": [
						{
							"name": "Удаление комментария – Успех – 204",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomSuffix = Math.floor(Math.random() * 100000);\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"function getFormattedFutureDate(hoursToAdd) {\r",
											"    const date = new Date();\r",
											"    date.setHours(date.getHours() + hoursToAdd);\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const seconds = String(date.getSeconds()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r",
											"}\r",
											"\r",
											"let createdUserIdInternal;\r",
											"let eventIdForComment;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${baseUrl}/admin/users`,\r",
											"    method: 'POST',\r",
											"    header: {'Content-Type': 'application/json'},\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: `testuser_delete_comment_${randomSuffix}@example.com`,\r",
											"            name: `Test User Delete Comment ${randomSuffix}`\r",
											"        })\r",
											"    }\r",
											"}, (errUser, responseUser) => {\r",
											"    if (errUser || responseUser.code !== 201) {\r",
											"        console.error(\"Pre-request: Не удалось создать пользователя:\", errUser || responseUser.text());\r",
											"        throw new Error(\"Pre-request: Не удалось создать пользователя.\");\r",
											"    }\r",
											"    const userData = responseUser.json();\r",
											"    createdUserIdInternal = userData.id;\r",
											"    pm.environment.set(\"createdUserId\", createdUserIdInternal);\r",
											"    console.log(\"Pre-request: Пользователь создан:\", createdUserIdInternal);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/admin/categories`,\r",
											"        method: 'POST',\r",
											"        header: {'Content-Type': 'application/json'},\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ name: `Category for Delete Comment ${randomSuffix}` })\r",
											"        }\r",
											"    }, (errCat, responseCat) => {\r",
											"        if (errCat || responseCat.code !== 201) {\r",
											"            console.error(\"Pre-request: Не удалось создать категорию:\", errCat || responseCat.text());\r",
											"            throw new Error(\"Pre-request: Не удалось создать категорию.\");\r",
											"        }\r",
											"        const categoryData = responseCat.json();\r",
											"        console.log(\"Pre-request: Категория создана:\", categoryData.id);\r",
											"\r",
											"        const eventDateForCreation = getFormattedFutureDate(3);\r",
											"        pm.sendRequest({\r",
											"            url: `${baseUrl}/users/${createdUserIdInternal}/events`,\r",
											"            method: 'POST',\r",
											"            header: {'Content-Type': 'application/json'},\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    annotation: `Event for comment deletion test ${randomSuffix}`,\r",
											"                    category: categoryData.id,\r",
											"                    description: `Description for comment deletion test ${randomSuffix}`,\r",
											"                    eventDate: eventDateForCreation,\r",
											"                    location: { lat: 55.760 + (randomSuffix / 1000000), lon: 37.621 + (randomSuffix / 1000000) },\r",
											"                    commentsEnabled: true,\r",
											"                    title: `Event Delete Comment ${randomSuffix}`\r",
											"                })\r",
											"            }\r",
											"        }, (errEvent, responseEvent) => {\r",
											"            if (errEvent || responseEvent.code !== 201) {\r",
											"                console.error(\"Pre-request: Не удалось создать событие:\", errEvent || responseEvent.text());\r",
											"                throw new Error(\"Pre-request: Не удалось создать событие.\");\r",
											"            }\r",
											"            const eventData = responseEvent.json();\r",
											"            pm.environment.set(\"eventIdForCommentVerification\", eventData.id);\r",
											"            console.log(\"Pre-request: Событие создано:\", eventData.id);\r",
											"\r",
											"            pm.sendRequest({\r",
											"                url: `${baseUrl}/admin/events/${eventData.id}`,\r",
											"                method: 'PATCH',\r",
											"                header: {'Content-Type': 'application/json'},\r",
											"                body: { mode: 'raw', raw: JSON.stringify({ stateAction: \"PUBLISH_EVENT\" }) }\r",
											"            }, (errPublish, responsePublish) => {\r",
											"                if (errPublish || responsePublish.code !== 200) {\r",
											"                    console.error(\"Pre-request: Не удалось опубликовать событие:\", errPublish || responsePublish.text());\r",
											"                    throw new Error(\"Pre-request: Не удалось опубликовать событие.\");\r",
											"                }\r",
											"                console.log(\"Pre-request: Событие опубликовано:\", eventIdForComment);\r",
											"\r",
											"                const commentText = `Comment to be deleted by user ${randomSuffix}`;\r",
											"                pm.sendRequest({\r",
											"                    url: `${baseUrl}/users/${createdUserIdInternal}/comments?eventId=${eventData.id}`,\r",
											"                    method: 'POST',\r",
											"                    header: {'Content-Type': 'application/json'},\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({ text: commentText })\r",
											"                    }\r",
											"                }, (errComment, responseComment) => {\r",
											"                    if (errComment || responseComment.code !== 201) {\r",
											"                        console.error(\"Pre-request: Не удалось создать комментарий:\", errComment || responseComment.text());\r",
											"                        throw new Error(\"Pre-request: Не удалось создать комментарий.\");\r",
											"                    }\r",
											"                    const commentData = responseComment.json();\r",
											"                    pm.environment.set(\"createdCommentId\", commentData.id);\r",
											"                    console.log(\"Pre-request: Комментарий для удаления создан:\", commentData.id);\r",
											"                    console.log(\"Pre-request: Настройка для DELETE /users/{userId}/comments/{commentId} завершена.\");\r",
											"                });\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 204 No Content\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Тело ответа пустое\", function () {\r",
											"    pm.response.to.not.have.body;\r",
											"});\r",
											"\r",
											"const deletedCommentId = parseInt(pm.environment.get(\"createdCommentId\"));\r",
											"const eventId = pm.environment.get(\"eventIdForCommentVerification\");\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"pm.test(\"Проверка: 'удаленный' комментарий не возвращается публичным API события\", function (done) {\r",
											"    if (!eventId) {\r",
											"        console.error(\"Verification Error: eventIdForCommentVerification не найден в окружении.\");\r",
											"        throw new Error(\"eventIdForCommentVerification не найден для верификации.\");\r",
											"    }\r",
											"    if (isNaN(deletedCommentId)) {\r",
											"        console.error(\"Verification Error: createdCommentId не является числом или не найден.\");\r",
											"        throw new Error(\"createdCommentId не валиден для верификации.\");\r",
											"    }\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/events/${eventId}/comments`,\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Ошибка при верификационном GET запросе:\", err);\r",
											"            pm.expect.fail(\"Ошибка при верификационном GET запросе: \" + err.message);\r",
											"        }\r",
											"\r",
											"        pm.expect(response).to.have.status(200, \"Верификационный GET должен вернуть 200 ОК\");\r",
											"        const comments = response.json();\r",
											"        pm.expect(comments).to.be.an('array', \"Ответ от верификационного GET должен быть массивом\");\r",
											"\r",
											"        let foundDeletedComment = false;\r",
											"        for (let i = 0; i < comments.length; i++) {\r",
											"            if (comments[i].id === deletedCommentId) {\r",
											"                foundDeletedComment = true;\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"        pm.expect(foundDeletedComment).to.be.false, `Комментарий с ID ${deletedCommentId} не должен быть найден после удаления`;\r",
											"        \r",
											"        done();\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"createdUserId\");\r",
											"    pm.environment.unset(\"createdCommentId\");\r",
											"    pm.environment.unset(\"eventIdForCommentVerification\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{createdUserId}}/comments/{{createdCommentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{createdUserId}}",
										"comments",
										"{{createdCommentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария – Чужой комментарий – 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomSuffix = Math.floor(Math.random() * 100000);\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"function getFormattedFutureDate(hoursToAdd) {\r",
											"    const date = new Date();\r",
											"    date.setHours(date.getHours() + hoursToAdd);\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const seconds = String(date.getSeconds()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r",
											"}\r",
											"\r",
											"let victimUserId, attackerUserId, eventIdForComment;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${baseUrl}/admin/users`,\r",
											"    method: 'POST',\r",
											"    header: {'Content-Type': 'application/json'},\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: `victim_user_delete_foreign_${randomSuffix}@example.com`,\r",
											"            name: `Victim User Delete Foreign ${randomSuffix}`\r",
											"        })\r",
											"    }\r",
											"}, (errVictim, responseVictim) => {\r",
											"    if (errVictim || responseVictim.code !== 201) {\r",
											"        console.error(\"Pre-request: Не удалось создать Victim User:\", errVictim || responseVictim.text());\r",
											"        throw new Error(\"Pre-request: Не удалось создать Victim User.\");\r",
											"    }\r",
											"    const victimUserData = responseVictim.json();\r",
											"    victimUserId = victimUserData.id;\r",
											"    console.log(\"Pre-request: Victim User создан:\", victimUserId);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/admin/users`,\r",
											"        method: 'POST',\r",
											"        header: {'Content-Type': 'application/json'},\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                email: `attacker_user_delete_foreign_${randomSuffix}@example.com`,\r",
											"                name: `Attacker User Delete Foreign ${randomSuffix}`\r",
											"            })\r",
											"        }\r",
											"    }, (errAttacker, responseAttacker) => {\r",
											"        if (errAttacker || responseAttacker.code !== 201) {\r",
											"            console.error(\"Pre-request: Не удалось создать Attacker User:\", errAttacker || responseAttacker.text());\r",
											"            throw new Error(\"Pre-request: Не удалось создать Attacker User.\");\r",
											"        }\r",
											"        const attackerUserData = responseAttacker.json();\r",
											"        attackerUserId = attackerUserData.id;\r",
											"        pm.environment.set(\"attackerUserId\", attackerUserId);\r",
											"        console.log(\"Pre-request: Attacker User создан:\", attackerUserId);\r",
											"\r",
											"        pm.sendRequest({\r",
											"            url: `${baseUrl}/admin/categories`,\r",
											"            method: 'POST',\r",
											"            header: {'Content-Type': 'application/json'},\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({ name: `Category for Foreign Comment Delete ${randomSuffix}` })\r",
											"            }\r",
											"        }, (errCat, responseCat) => {\r",
											"            if (errCat || responseCat.code !== 201) {\r",
											"                console.error(\"Pre-request: Не удалось создать категорию:\", errCat || responseCat.text());\r",
											"                throw new Error(\"Pre-request: Не удалось создать категорию.\");\r",
											"            }\r",
											"            const categoryData = responseCat.json();\r",
											"            console.log(\"Pre-request: Категория создана:\", categoryData.id);\r",
											"\r",
											"            const eventDateForCreation = getFormattedFutureDate(3);\r",
											"            pm.sendRequest({\r",
											"                url: `${baseUrl}/users/${victimUserId}/events`, // Событие создает Victim User\r",
											"                method: 'POST',\r",
											"                header: {'Content-Type': 'application/json'},\r",
											"                body: {\r",
											"                    mode: 'raw',\r",
											"                    raw: JSON.stringify({\r",
											"                        annotation: `Event for foreign comment delete test ${randomSuffix}`,\r",
											"                        category: categoryData.id,\r",
											"                        description: `Description for foreign comment delete test ${randomSuffix}`,\r",
											"                        eventDate: eventDateForCreation,\r",
											"                        location: { lat: 55.7602 + (randomSuffix / 1000000), lon: 37.6212 + (randomSuffix / 1000000) },\r",
											"                        commentsEnabled: true,\r",
											"                        title: `Event Foreign Delete ${randomSuffix}`\r",
											"                    })\r",
											"                }\r",
											"            }, (errEvent, responseEvent) => {\r",
											"                if (errEvent || responseEvent.code !== 201) {\r",
											"                    console.error(\"Pre-request: Не удалось создать событие:\", errEvent || responseEvent.text());\r",
											"                    throw new Error(\"Pre-request: Не удалось создать событие.\");\r",
											"                }\r",
											"                const eventData = responseEvent.json();\r",
											"                eventIdForComment = eventData.id;\r",
											"                console.log(\"Pre-request: Событие создано:\", eventIdForComment);\r",
											"\r",
											"                pm.sendRequest({\r",
											"                    url: `${baseUrl}/admin/events/${eventIdForComment}`,\r",
											"                    method: 'PATCH',\r",
											"                    header: {'Content-Type': 'application/json'},\r",
											"                    body: { mode: 'raw', raw: JSON.stringify({ stateAction: \"PUBLISH_EVENT\" }) }\r",
											"                }, (errPublish, responsePublish) => {\r",
											"                    if (errPublish || responsePublish.code !== 200) {\r",
											"                        console.error(\"Pre-request: Не удалось опубликовать событие:\", errPublish || responsePublish.text());\r",
											"                        throw new Error(\"Pre-request: Не удалось опубликовать событие.\");\r",
											"                    }\r",
											"                    console.log(\"Pre-request: Событие опубликовано:\", eventIdForComment);\r",
											"\r",
											"                    const victimCommentText = `This is Victim User's comment to be targeted ${randomSuffix}`;\r",
											"                    pm.sendRequest({\r",
											"                        url: `${baseUrl}/users/${victimUserId}/comments?eventId=${eventIdForComment}`,\r",
											"                        method: 'POST',\r",
											"                        header: {'Content-Type': 'application/json'},\r",
											"                        body: {\r",
											"                            mode: 'raw',\r",
											"                            raw: JSON.stringify({ text: victimCommentText })\r",
											"                        }\r",
											"                    }, (errComment, responseComment) => {\r",
											"                        if (errComment || responseComment.code !== 201) {\r",
											"                            console.error(\"Pre-request: Не удалось создать комментарий Victim User:\", errComment || responseComment.text());\r",
											"                            throw new Error(\"Pre-request: Не удалось создать комментарий Victim User.\");\r",
											"                        }\r",
											"                        const victimCommentData = responseComment.json();\r",
											"                        pm.environment.set(\"victimCommentId\", victimCommentData.id);\r",
											"                        console.log(\"Pre-request: Комментарий Victim User создан:\", victimCommentData.id);\r",
											"                        console.log(\"Pre-request: Настройка для удаления чужого комментария завершена.\");\r",
											"                    });\r",
											"                });\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ является валидным JSON (для ApiError)\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"const victimCommentId = pm.environment.get(\"victimCommentId\");\r",
											"\r",
											"pm.test(\"Тело ответа содержит ожидаемые поля ошибки ApiError (без 'errors')\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    pm.expect(jsonData).to.have.all.keys('status', 'reason', 'message', 'timestamp');\r",
											"    pm.expect(jsonData.status).to.equal(\"NOT_FOUND\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение об ошибке (message) не пустое\", function () {\r",
											"    pm.expect(jsonData.message).to.not.be.empty;\r",
											"    console.log(\"Сообщение об ошибке: \", jsonData.message);\r",
											"});\r",
											"\r",
											"pm.test(\"Поле 'reason' (причина ошибки) не пустое\", function () {\r",
											"    pm.expect(jsonData.reason).to.not.be.empty;\r",
											"    console.log(\"Причина ошибки: \", jsonData.reason);\r",
											"});\r",
											"\r",
											"pm.test(\"Timestamp ошибки присутствует и в правильном формате\", function () {\r",
											"    pm.expect(jsonData.timestamp).to.be.a('string');\r",
											"    pm.expect(jsonData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/);\r",
											"});\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"attackerUserId\");\r",
											"    pm.environment.unset(\"victimCommentId\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{attackerUserId}}/comments/{{victimCommentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{attackerUserId}}",
										"comments",
										"{{victimCommentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария – Удалённый комментарий – 204",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomSuffix = Math.floor(Math.random() * 100000);\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"function getFormattedFutureDate(hoursToAdd) {\r",
											"    const date = new Date();\r",
											"    date.setHours(date.getHours() + hoursToAdd);\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const seconds = String(date.getSeconds()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r",
											"}\r",
											"\r",
											"let createdUserIdInternal;\r",
											"let eventIdForComment;\r",
											"let commentIdForReDelete;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${baseUrl}/admin/users`,\r",
											"    method: 'POST',\r",
											"    header: {'Content-Type': 'application/json'},\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: `testuser_redelete_comment_${randomSuffix}@example.com`,\r",
											"            name: `Test User ReDelete Comment ${randomSuffix}`\r",
											"        })\r",
											"    }\r",
											"}, (errUser, responseUser) => {\r",
											"    if (errUser || responseUser.code !== 201) {\r",
											"        console.error(\"Pre-request: Не удалось создать пользователя:\", errUser || responseUser.text());\r",
											"        throw new Error(\"Pre-request: Не удалось создать пользователя.\");\r",
											"    }\r",
											"    const userData = responseUser.json();\r",
											"    createdUserIdInternal = userData.id;\r",
											"    pm.environment.set(\"createdUserId\", createdUserIdInternal);\r",
											"    console.log(\"Pre-request: Пользователь создан:\", createdUserIdInternal);\r",
											"\r",
											"    pm.sendRequest({ \r",
											"        url: `${baseUrl}/admin/categories`,\r",
											"        method: 'POST',\r",
											"        header: {'Content-Type': 'application/json'},\r",
											"        body: { mode: 'raw', raw: JSON.stringify({ name: `Category for ReDelete Comment ${randomSuffix}` }) }\r",
											"     }, (errCat, responseCat) => {\r",
											"        if (errCat || responseCat.code !== 201) {\r",
											"            console.error(\"Pre-request: Не удалось создать категорию:\", errCat || responseCat.text());\r",
											"            throw new Error(\"Pre-request: Не удалось создать категорию.\");\r",
											"        }\r",
											"        const categoryData = responseCat.json();\r",
											"        console.log(\"Pre-request: Категория создана:\", categoryData.id);\r",
											"\r",
											"        pm.sendRequest({\r",
											"            url: `${baseUrl}/users/${createdUserIdInternal}/events`,\r",
											"            method: 'POST',\r",
											"            header: {'Content-Type': 'application/json'},\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    annotation: `Event for comment re-deletion test ${randomSuffix}`,\r",
											"                    category: categoryData.id,\r",
											"                    description: `Description for comment re-deletion test ${randomSuffix}`,\r",
											"                    eventDate: getFormattedFutureDate(3),\r",
											"                    location: { lat: 55.7603 + (randomSuffix / 1000000), lon: 37.6213 + (randomSuffix / 1000000) },\r",
											"                    commentsEnabled: true,\r",
											"                    title: `Event ReDelete Comment ${randomSuffix}`\r",
											"                })\r",
											"            }\r",
											"        }, (errEvent, responseEvent) => {\r",
											"            if (errEvent || responseEvent.code !== 201) {\r",
											"                console.error(\"Pre-request: Не удалось создать событие:\", errEvent || responseEvent.text());\r",
											"                throw new Error(\"Pre-request: Не удалось создать событие.\");\r",
											"            }\r",
											"            const eventData = responseEvent.json();\r",
											"            eventIdForComment = eventData.id;\r",
											"            console.log(\"Pre-request: Событие создано:\", eventIdForComment);\r",
											"\r",
											"            pm.sendRequest({\r",
											"                url: `${baseUrl}/admin/events/${eventIdForComment}`,\r",
											"                method: 'PATCH',\r",
											"                header: {'Content-Type': 'application/json'},\r",
											"                body: { mode: 'raw', raw: JSON.stringify({ stateAction: \"PUBLISH_EVENT\" }) }\r",
											"            }, (errPublish, responsePublish) => {\r",
											"                if (errPublish || responsePublish.code !== 200) {\r",
											"                    console.error(\"Pre-request: Не удалось опубликовать событие:\", errPublish || responsePublish.text());\r",
											"                    throw new Error(\"Pre-request: Не удалось опубликовать событие.\");\r",
											"                }\r",
											"                console.log(\"Pre-request: Событие опубликовано:\", eventIdForComment);\r",
											"\r",
											"                const commentText = `Comment to be re-deleted by user ${randomSuffix}`;\r",
											"                pm.sendRequest({\r",
											"                    url: `${baseUrl}/users/${createdUserIdInternal}/comments?eventId=${eventIdForComment}`,\r",
											"                    method: 'POST',\r",
											"                    header: {'Content-Type': 'application/json'},\r",
											"                    body: { mode: 'raw', raw: JSON.stringify({ text: commentText }) }\r",
											"                }, (errComment, responseComment) => {\r",
											"                    if (errComment || responseComment.code !== 201) {\r",
											"                        console.error(\"Pre-request: Не удалось создать комментарий:\", errComment || responseComment.text());\r",
											"                        throw new Error(\"Pre-request: Не удалось создать комментарий.\");\r",
											"                    }\r",
											"                    const commentData = responseComment.json();\r",
											"                    commentIdForReDelete = commentData.id;\r",
											"                    pm.environment.set(\"createdCommentId\", commentIdForReDelete);\r",
											"                    console.log(\"Pre-request: Комментарий создан:\", commentIdForReDelete);\r",
											"\r",
											"                    pm.sendRequest({\r",
											"                        url: `${baseUrl}/users/${createdUserIdInternal}/comments/${commentIdForReDelete}`,\r",
											"                        method: 'DELETE'\r",
											"                    }, (errFirstDelete, responseFirstDelete) => {\r",
											"                        if (errFirstDelete || responseFirstDelete.code !== 204) {\r",
											"                            console.error(\"Pre-request: Первое 'мягкое' удаление не удалось:\", errFirstDelete || responseFirstDelete.text());\r",
											"                            throw new Error(\"Pre-request: Первое 'мягкое' удаление не удалось. Status: \" + (responseFirstDelete ? responseFirstDelete.code : 'N/A'));\r",
											"                        }\r",
											"                        console.log(\"Pre-request: Комментарий успешно 'мягко' удален (первый раз).\");\r",
											"                        console.log(\"Pre-request: Настройка для повторного DELETE завершена. Основной запрос будет отправлен сейчас.\");\r",
											"                    });\r",
											"                });\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 204 No Content (при повторном удалении)\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Тело ответа пустое (при повторном удалении)\", function () {\r",
											"    pm.response.to.not.have.body;\r",
											"});\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"createdUserId\");\r",
											"    pm.environment.unset(\"createdCommentId\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{createdUserId}}/comments/{{createdCommentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{createdUserId}}",
										"comments",
										"{{createdCommentId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "API – Public",
			"item": [
				{
					"name": "Получение комментариев к событию",
					"item": [
						{
							"name": "Получение комментариев к событию – Успех – 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomSuffix = Math.floor(Math.random() * 100000);\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"const numberOfCommentsToCreate = 5;\r",
											"const fromParam = 0;\r",
											"const sizeParam = 3;\r",
											"\r",
											"function getFormattedFutureDate(hoursToAdd) {\r",
											"    const date = new Date();\r",
											"    date.setHours(date.getHours() + hoursToAdd);\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const seconds = String(date.getSeconds()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r",
											"}\r",
											"\r",
											"let createdUserIdInternal;\r",
											"let createdEventIdInternal;\r",
											"let commentAuthorName;\r",
											"let createdCommentDetails = [];\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${baseUrl}/admin/users`,\r",
											"    method: 'POST',\r",
											"    header: {'Content-Type': 'application/json'},\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: `testuser_event_comments_pub_${randomSuffix}@example.com`,\r",
											"            name: `Test User Event Comments Pub ${randomSuffix}`\r",
											"        })\r",
											"    }\r",
											"}, (errUser, responseUser) => {\r",
											"    if (errUser || responseUser.code !== 201) {\r",
											"        console.error(\"Pre-request: Не удалось создать пользователя:\", errUser || responseUser.text());\r",
											"        throw new Error(\"Pre-request: Не удалось создать пользователя.\");\r",
											"    }\r",
											"    const userData = responseUser.json();\r",
											"    createdUserIdInternal = userData.id;\r",
											"    commentAuthorName = userData.name;\r",
											"    console.log(\"Pre-request: Пользователь (автор комментариев) создан:\", createdUserIdInternal);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/admin/categories`,\r",
											"        method: 'POST',\r",
											"        header: {'Content-Type': 'application/json'},\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ name: `Category for Event Comments Pub ${randomSuffix}` })\r",
											"        }\r",
											"    }, (errCat, responseCat) => {\r",
											"        if (errCat || responseCat.code !== 201) {\r",
											"            console.error(\"Pre-request: Не удалось создать категорию:\", errCat || responseCat.text());\r",
											"            throw new Error(\"Pre-request: Не удалось создать категорию.\");\r",
											"        }\r",
											"        const categoryData = responseCat.json();\r",
											"        console.log(\"Pre-request: Категория создана:\", categoryData.id);\r",
											"\r",
											"        const eventDateForCreation = getFormattedFutureDate(3);\r",
											"        pm.sendRequest({\r",
											"            url: `${baseUrl}/users/${createdUserIdInternal}/events`,\r",
											"            method: 'POST',\r",
											"            header: {'Content-Type': 'application/json'},\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    annotation: `Event for public comments test ${randomSuffix}`,\r",
											"                    category: categoryData.id,\r",
											"                    description: `Description for public comments test ${randomSuffix}`,\r",
											"                    eventDate: eventDateForCreation,\r",
											"                    location: { lat: 55.758 + (randomSuffix / 1000000), lon: 37.619 + (randomSuffix / 1000000) },\r",
											"                    commentsEnabled: true,\r",
											"                    title: `Event Public Comments ${randomSuffix}`\r",
											"                })\r",
											"            }\r",
											"        }, (errEvent, responseEvent) => {\r",
											"            if (errEvent || responseEvent.code !== 201) {\r",
											"                console.error(\"Pre-request: Не удалось создать событие:\", errEvent || responseEvent.text());\r",
											"                throw new Error(\"Pre-request: Не удалось создать событие.\");\r",
											"            }\r",
											"            const eventData = responseEvent.json();\r",
											"            createdEventIdInternal = eventData.id;\r",
											"            pm.environment.set(\"createdEventId\", createdEventIdInternal);\r",
											"            console.log(\"Pre-request: Событие создано:\", createdEventIdInternal);\r",
											"\r",
											"            pm.sendRequest({\r",
											"                url: `${baseUrl}/admin/events/${createdEventIdInternal}`,\r",
											"                method: 'PATCH',\r",
											"                header: {'Content-Type': 'application/json'},\r",
											"                body: { mode: 'raw', raw: JSON.stringify({ stateAction: \"PUBLISH_EVENT\" }) }\r",
											"            }, (errPublish, responsePublish) => {\r",
											"                if (errPublish || responsePublish.code !== 200) {\r",
											"                    console.error(\"Pre-request: Не удалось опубликовать событие:\", errPublish || responsePublish.text());\r",
											"                    throw new Error(\"Pre-request: Не удалось опубликовать событие.\");\r",
											"                }\r",
											"                console.log(\"Pre-request: Событие опубликовано:\", createdEventIdInternal);\r",
											"\r",
											"                const numberOfEvents = 1;\r",
											"                const createdEventIds = [createdEventIdInternal];\r",
											"                createComments();\r",
											"\r",
											"                function createComments() {\r",
											"                    let commentsCreatedCount = 0;\r",
											"                    function createCommentRecursive(j) {\r",
											"                        if (j >= numberOfCommentsToCreate) {\r",
											"                            createdCommentDetails.sort((a, b) => {\r",
											"                                    const dateA = new Date(a.createdOn.replace(' ', 'T') + 'Z').getTime();\r",
											"                                    const dateB = new Date(b.createdOn.replace(' ', 'T') + 'Z').getTime();\r",
											"                                    if (dateB !== dateA) return dateB - dateA;\r",
											"                                    return b.id - a.id;\r",
											"                                });\r",
											"                            pm.environment.set(\"expectedCommentDetails\", JSON.stringify(createdCommentDetails));\r",
											"                            pm.environment.set(\"fromParam\", String(fromParam));\r",
											"                            pm.environment.set(\"sizeParam\", String(sizeParam));\r",
											"                            console.log(\"Pre-request: Настройка для получения комментариев пользователя завершена.\");\r",
											"                            return;\r",
											"                        }\r",
											"\r",
											"                        const commentText = `User's comment ${j} on event ${j % numberOfEvents} ${randomSuffix}`;\r",
											"                        const eventIdForThisComment = createdEventIds[j % numberOfEvents];\r",
											"\r",
											"                        setTimeout(() => {\r",
											"                            pm.sendRequest({\r",
											"                                url: `${baseUrl}/users/${createdUserIdInternal}/comments?eventId=${eventIdForThisComment}`,\r",
											"                                method: 'POST',\r",
											"                                header: {'Content-Type': 'application/json'},\r",
											"                                body: {\r",
											"                                    mode: 'raw',\r",
											"                                    raw: JSON.stringify({ text: commentText })\r",
											"                                }\r",
											"                            }, (errComment, responseComment) => {\r",
											"                                if (errComment || responseComment.code !== 201) {\r",
											"                                    console.error(`Pre-request: Не удалось создать комментарий ${j}:`, errComment || responseComment.text());\r",
											"                                    throw new Error(`Pre-request: Не удалось создать комментарий ${j}.`);\r",
											"                                }\r",
											"                                const commentData = responseComment.json();\r",
											"                                createdCommentDetails.push({\r",
											"                                    id: commentData.id,\r",
											"                                    text: commentData.text,\r",
											"                                    eventId: commentData.eventId,\r",
											"                                    createdOn: commentData.createdOn\r",
											"                                });\r",
											"                                console.log(`Pre-request: Комментарий ${j} создан:`, commentData.id, `в ${commentData.createdOn}`);\r",
											"                                \r",
											"                                commentsCreatedCount++;\r",
											"                                createCommentRecursive(j + 1);\r",
											"                            });\r",
											"                        }, 50);\r",
											"                    }\r",
											"                    createCommentRecursive(0);\r",
											"                }\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ является валидным JSON и представляет собой массив\", function () {\r",
											"    pm.response.to.be.json;\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"const expectedSize = parseInt(pm.environment.get(\"sizeParam\"));\r",
											"const allExpectedComments = JSON.parse(pm.environment.get(\"expectedCommentDetails\"));\r",
											"const expectedEventId = parseInt(pm.environment.get(\"createdEventId\"));\r",
											"\r",
											"const from = parseInt(pm.environment.get(\"fromParam\"));\r",
											"const expectedReturnedCount = Math.min(expectedSize, allExpectedComments.length - from);\r",
											"\r",
											"pm.test(`Возвращено корректное количество комментариев (ожидается ${expectedReturnedCount})`, function () {\r",
											"    pm.expect(jsonData.length).to.equal(expectedReturnedCount);\r",
											"});\r",
											"\r",
											"if (jsonData.length > 0) {\r",
											"    pm.test(\"Структура каждого комментария в ответе корректна\", function () {\r",
											"        jsonData.forEach(function(comment, index) {\r",
											"            pm.expect(comment, `Комментарий #${index}`).to.have.all.keys(\r",
											"                'id', 'text', 'author', 'eventId', 'createdOn', 'updatedOn', 'isEdited'\r",
											"            );\r",
											"            pm.expect(comment.id, `ID комментария #${index}`).to.be.a('number');\r",
											"            pm.expect(comment.text, `Текст комментария #${index}`).to.be.a('string');\r",
											"            \r",
											"            pm.expect(comment.author, `Автор комментария #${index}`).to.be.an('object');\r",
											"            pm.expect(comment.author.id, `ID автора комментария #${index}`).to.be.a('number');\r",
											"            pm.expect(comment.author.name, `Имя автора комментария #${index}`).to.be.a('string');\r",
											"\r",
											"            pm.expect(comment.eventId, `ID события комментария #${index}`).to.equal(expectedEventId);\r",
											"            pm.expect(comment.createdOn, `Время создания комментария #${index}`).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/);\r",
											"            pm.expect(comment.isEdited, `Флаг isEdited комментария #${index}`).to.be.a('boolean');\r",
											"\r",
											"            if (comment.hasOwnProperty('isDeleted')) {\r",
											"                pm.expect(comment.isDeleted, `Флаг isDeleted комментария #${index} (если есть)`).to.be.false;\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"\r",
											"    pm.test(\"Комментарии соответствуют ожидаемым (с учетом пагинации и сортировки)\", function() {\r",
											"        const expectedSlice = allExpectedComments.slice(from, from + expectedSize);\r",
											"\r",
											"        pm.expect(jsonData.length).to.equal(expectedSlice.length);\r",
											"\r",
											"        jsonData.forEach((returnedComment, index) => {\r",
											"            const expectedComment = expectedSlice[index];\r",
											"            pm.expect(returnedComment.id, `ID комментария ${index}`).to.equal(expectedComment.id);\r",
											"            pm.expect(returnedComment.text, `Текст комментария ${index}`).to.equal(expectedComment.text);\r",
											"            pm.expect(returnedComment.eventId, `EventID комментария ${index}`).to.equal(expectedComment.eventId);\r",
											"        });\r",
											"    });\r",
											"} else if (expectedReturnedCount > 0) {\r",
											"    pm.test(\"Ожидались комментарии, но получен пустой массив\", function() {\r",
											"        pm.expect.fail(\"Ожидались комментарии, но массив пуст.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"createdEventId\");\r",
											"    pm.environment.unset(\"fromParam\");\r",
											"    pm.environment.unset(\"sizeParam\");\r",
											"    pm.environment.unset(\"expectedCommentDetails\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/{{createdEventId}}/comments?from={{fromParam}}&size={{sizeParam}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"{{createdEventId}}",
										"comments"
									],
									"query": [
										{
											"key": "from",
											"value": "{{fromParam}}"
										},
										{
											"key": "size",
											"value": "{{sizeParam}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение комментариев к событию – Событие не существует – 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"const nonExistentEventId = Math.floor(Math.random() * 1000000) + 9000000;\r",
											"pm.environment.set(\"nonExistentEventId\", nonExistentEventId);\r",
											"\r",
											"console.log(\"Pre-request: Установлен ID несуществующего события:\", nonExistentEventId);\r",
											"console.log(\"Pre-request: Настройка для GET комментариев несуществующего события завершена.\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ является валидным JSON (для ApiError)\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"const expectedNonExistentEventId = pm.environment.get(\"nonExistentEventId\");\r",
											"\r",
											"pm.test(\"Тело ответа содержит ожидаемые поля ошибки ApiError (без 'errors')\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    pm.expect(jsonData).to.have.all.keys('status', 'reason', 'message', 'timestamp');\r",
											"    pm.expect(jsonData.status).to.equal(\"NOT_FOUND\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение об ошибке (message) не пустое\", function () {\r",
											"    pm.expect(jsonData.message).to.not.be.empty;\r",
											"    console.log(\"Сообщение об ошибке: \", jsonData.message);\r",
											"});\r",
											"\r",
											"pm.test(\"Поле 'reason' (причина ошибки) не пустое\", function () {\r",
											"    pm.expect(jsonData.reason).to.not.be.empty;\r",
											"    console.log(\"Причина ошибки: \", jsonData.reason);\r",
											"});\r",
											"\r",
											"pm.test(\"Timestamp ошибки присутствует и в правильном формате\", function () {\r",
											"    pm.expect(jsonData.timestamp).to.be.a('string');\r",
											"    pm.expect(jsonData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/);\r",
											"});\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"nonExistentEventId\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/{{nonExistentEventId}}/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"{{nonExistentEventId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение комментариев к событию – Событие не опубликовано – 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomSuffix = Math.floor(Math.random() * 100000);\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"function getFormattedFutureDate(hoursToAdd) {\r",
											"    const date = new Date();\r",
											"    date.setHours(date.getHours() + hoursToAdd);\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const seconds = String(date.getSeconds()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r",
											"}\r",
											"\r",
											"let eventCreatorUserId;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${baseUrl}/admin/users`,\r",
											"    method: 'POST',\r",
											"    header: {'Content-Type': 'application/json'},\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: `testuser_unpublished_evt_comm_${randomSuffix}@example.com`,\r",
											"            name: `Test User Unpublished Event Comments ${randomSuffix}`\r",
											"        })\r",
											"    }\r",
											"}, (errUser, responseUser) => {\r",
											"    if (errUser || responseUser.code !== 201) {\r",
											"        console.error(\"Pre-request: Не удалось создать пользователя:\", errUser || responseUser.text());\r",
											"        throw new Error(\"Pre-request: Не удалось создать пользователя.\");\r",
											"    }\r",
											"    const userData = responseUser.json();\r",
											"    eventCreatorUserId = userData.id;\r",
											"    console.log(\"Pre-request: Пользователь (создатель события) создан:\", eventCreatorUserId);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/admin/categories`,\r",
											"        method: 'POST',\r",
											"        header: {'Content-Type': 'application/json'},\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ name: `Category for Unpublished Event Comments ${randomSuffix}` })\r",
											"        }\r",
											"    }, (errCat, responseCat) => {\r",
											"        if (errCat || responseCat.code !== 201) {\r",
											"            console.error(\"Pre-request: Не удалось создать категорию:\", errCat || responseCat.text());\r",
											"            throw new Error(\"Pre-request: Не удалось создать категорию.\");\r",
											"        }\r",
											"        const categoryData = responseCat.json();\r",
											"        console.log(\"Pre-request: Категория создана:\", categoryData.id);\r",
											"\r",
											"        const eventDateForCreation = getFormattedFutureDate(3);\r",
											"        pm.sendRequest({\r",
											"            url: `${baseUrl}/users/${eventCreatorUserId}/events`,\r",
											"            method: 'POST',\r",
											"            header: {'Content-Type': 'application/json'},\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    annotation: `Unpublished event for public comments test ${randomSuffix}`,\r",
											"                    category: categoryData.id,\r",
											"                    description: `Description for unpublished public comments test ${randomSuffix}`,\r",
											"                    eventDate: eventDateForCreation,\r",
											"                    location: { lat: 55.759 + (randomSuffix / 1000000), lon: 37.620 + (randomSuffix / 1000000) },\r",
											"                    commentsEnabled: true,\r",
											"                    title: `Unpublished Event Public Comments ${randomSuffix}`\r",
											"                })\r",
											"            }\r",
											"        }, (errEvent, responseEvent) => {\r",
											"            if (errEvent || responseEvent.code !== 201) {\r",
											"                console.error(\"Pre-request: Не удалось создать событие:\", errEvent || responseEvent.text());\r",
											"                throw new Error(\"Pre-request: Не удалось создать событие.\");\r",
											"            }\r",
											"            const eventData = responseEvent.json();\r",
											"            pm.environment.set(\"unpublishedEventId\", eventData.id);\r",
											"            console.log(\"Pre-request: Событие (неопубликованное) создано:\", eventData.id, \"Состояние:\", eventData.state);\r",
											"            console.log(\"Pre-request: Настройка для GET комментариев неопубликованного события завершена.\");\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ является валидным JSON (для ApiError)\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"const unpublishedEventId = pm.environment.get(\"unpublishedEventId\");\r",
											"\r",
											"pm.test(\"Тело ответа содержит ожидаемые поля ошибки ApiError (без 'errors')\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    pm.expect(jsonData).to.have.all.keys('status', 'reason', 'message', 'timestamp');\r",
											"    pm.expect(jsonData.status).to.equal(\"NOT_FOUND\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение об ошибке (message) не пустое\", function () {\r",
											"    pm.expect(jsonData.message).to.not.be.empty;\r",
											"    console.log(\"Сообщение об ошибке: \", jsonData.message);\r",
											"});\r",
											"\r",
											"pm.test(\"Поле 'reason' (причина ошибки) не пустое\", function () {\r",
											"    pm.expect(jsonData.reason).to.not.be.empty;\r",
											"    console.log(\"Причина ошибки: \", jsonData.reason);\r",
											"});\r",
											"\r",
											"pm.test(\"Timestamp ошибки присутствует и в правильном формате\", function () {\r",
											"    pm.expect(jsonData.timestamp).to.be.a('string');\r",
											"    pm.expect(jsonData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/);\r",
											"});\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"unpublishedEventId\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/{{unpublishedEventId}}/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"{{unpublishedEventId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение комментариев к событию – size=0 – 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomSuffix = Math.floor(Math.random() * 100000);\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\") || \"http://localhost:8080\";\r",
											"\r",
											"function getFormattedFutureDate(hoursToAdd) {\r",
											"    const date = new Date();\r",
											"    date.setHours(date.getHours() + hoursToAdd);\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const seconds = String(date.getSeconds()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r",
											"}\r",
											"\r",
											"let eventCreatorUserId, createdEventIdInternal;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${baseUrl}/admin/users`, method: 'POST', header: {'Content-Type': 'application/json'},\r",
											"    body: { mode: 'raw', raw: JSON.stringify({\r",
											"        email: `testuser_evt_comm_size0_${randomSuffix}@example.com`,\r",
											"        name: `TestUser EvtCommSize0 ${randomSuffix}`\r",
											"    })}\r",
											"}, (errUser, responseUser) => {\r",
											"    if (errUser || responseUser.code !== 201) {\r",
											"        console.error(\"Pre-request: Не удалось создать пользователя:\", errUser || responseUser.text());\r",
											"        throw new Error(\"Pre-request: Не удалось создать пользователя.\");\r",
											"    }\r",
											"    const userData = responseUser.json();\r",
											"    eventCreatorUserId = userData.id;\r",
											"    console.log(\"Pre-request: Пользователь создан:\", eventCreatorUserId);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/admin/categories`,\r",
											"        method: 'POST',\r",
											"        header: {'Content-Type': 'application/json'},\r",
											"        body: { mode: 'raw', raw: JSON.stringify({ name: `Category EvtCommSize0 ${randomSuffix}` }) }\r",
											"     }, (errCat, responseCat) => {\r",
											"        if (errCat || responseCat.code !== 201) {\r",
											"            console.error(\"Pre-request: Не удалось создать категорию:\", errCat || responseCat.text());\r",
											"            throw new Error(\"Pre-request: Не удалось создать категорию.\");\r",
											"        }\r",
											"        const categoryData = responseCat.json();\r",
											"        console.log(\"Pre-request: Категория создана:\", categoryData.id);\r",
											"\r",
											"        pm.sendRequest({\r",
											"            url: `${baseUrl}/users/${eventCreatorUserId}/events`,\r",
											"            method: 'POST',\r",
											"            header: {'Content-Type': 'application/json'},\r",
											"            body: { mode: 'raw', raw: JSON.stringify({\r",
											"                title: `Event EvtCommSize0 ${randomSuffix}`,\r",
											"                annotation: `Annotation with sufficient length ${randomSuffix}`, category: categoryData.id, description: `Description with sufficient length ${randomSuffix}`,\r",
											"                eventDate: getFormattedFutureDate(3), location: { lat: 55.75, lon: 37.65 }, commentsEnabled: true\r",
											"            })}\r",
											"        }, (errEvent, responseEvent) => {\r",
											"            if (errEvent || responseEvent.code !== 201) {\r",
											"                console.error(\"Pre-request: Не удалось создать событие:\", errEvent || responseEvent.text());\r",
											"                throw new Error(\"Pre-request: Не удалось создать событие.\");\r",
											"            }\r",
											"            const eventData = responseEvent.json();\r",
											"            createdEventIdInternal = eventData.id;\r",
											"            pm.environment.set(\"createdEventId\", createdEventIdInternal);\r",
											"            console.log(\"Pre-request: Событие создано:\", createdEventIdInternal);\r",
											"\r",
											"            pm.sendRequest({\r",
											"                url: `${baseUrl}/admin/events/${createdEventIdInternal}`, method: 'PATCH',\r",
											"                header: {'Content-Type': 'application/json'}, body: { mode: 'raw', raw: JSON.stringify({ stateAction: \"PUBLISH_EVENT\" })}\r",
											"            }, (errPublish, responsePublish) => {\r",
											"                if (errPublish || responsePublish.code !== 200) {\r",
											"                    console.error(\"Pre-request: Не удалось опубликовать событие:\", errPublish || responsePublish.text());\r",
											"                    throw new Error(\"Pre-request: Не удалось опубликовать событие.\");\r",
											"                }\r",
											"                console.log(\"Pre-request: Событие опубликовано:\", createdEventIdInternal);\r",
											"                console.log(\"Pre-request: Настройка для GET комментариев события с size=0 завершена.\");\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ является валидным JSON (для ApiError)\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Тело ответа содержит ожидаемые поля ошибки ApiError (без 'errors')\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    pm.expect(jsonData).to.have.all.keys('status', 'reason', 'message', 'timestamp', 'errors');\r",
											"    pm.expect(jsonData.status).to.equal(\"BAD_REQUEST\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение об ошибке (message) не пустое и указывает на проблему с параметром 'size'\", function () {\r",
											"    pm.expect(jsonData.message).to.not.be.empty;\r",
											"    console.log(\"Сообщение об ошибке: \", jsonData.message);\r",
											"});\r",
											"\r",
											"pm.test(\"Поле 'reason' (причина ошибки) не пустое\", function () {\r",
											"    pm.expect(jsonData.reason).to.not.be.empty;\r",
											"    console.log(\"Причина ошибки: \", jsonData.reason);\r",
											"});\r",
											"\r",
											"pm.test(\"Timestamp ошибки присутствует и в правильном формате\", function () {\r",
											"    pm.expect(jsonData.timestamp).to.be.a('string');\r",
											"    pm.expect(jsonData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/);\r",
											"});\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"createdEventId\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/{{createdEventId}}/comments?from=0&size=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"{{createdEventId}}",
										"comments"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "API – Admin",
			"item": [
				{
					"name": "Удаление комментария",
					"item": [
						{
							"name": "Удаление комментария (админ) – Успех – 204",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomSuffix = Math.floor(Math.random() * 100000);\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"function getFormattedFutureDate(hoursToAdd) {\r",
											"    const date = new Date();\r",
											"    date.setHours(date.getHours() + hoursToAdd);\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const seconds = String(date.getSeconds()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r",
											"}\r",
											"\r",
											"let commentAuthorUserId;\r",
											"let eventIdForComment;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${baseUrl}/admin/users`,\r",
											"    method: 'POST',\r",
											"    header: {'Content-Type': 'application/json'},\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: `testuser_admin_delete_comment_author_${randomSuffix}@example.com`,\r",
											"            name: `TestUser AdminDeleteCommentAuthor ${randomSuffix}`\r",
											"        })\r",
											"    }\r",
											"}, (errUser, responseUser) => {\r",
											"    if (errUser || responseUser.code !== 201) {\r",
											"        console.error(\"Pre-request: Не удалось создать пользователя (автора комментария):\", errUser || responseUser.text());\r",
											"        throw new Error(\"Pre-request: Не удалось создать пользователя (автора комментария).\");\r",
											"    }\r",
											"    const userData = responseUser.json();\r",
											"    commentAuthorUserId = userData.id;\r",
											"    console.log(\"Pre-request: Пользователь (автор комментария) создан:\", commentAuthorUserId);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/admin/categories`,\r",
											"        method: 'POST',\r",
											"        header: {'Content-Type': 'application/json'},\r",
											"        body: { mode: 'raw', raw: JSON.stringify({ name: `Category for Admin Delete Comment ${randomSuffix}` }) }\r",
											"    }, (errCat, responseCat) => {\r",
											"        if (errCat || responseCat.code !== 201) {\r",
											"            console.error(\"Pre-request: Не удалось создать категорию:\", errCat || responseCat.text());\r",
											"            throw new Error(\"Pre-request: Не удалось создать категорию.\");\r",
											"        }\r",
											"        const categoryData = responseCat.json();\r",
											"        console.log(\"Pre-request: Категория создана:\", categoryData.id);\r",
											"\r",
											"        pm.sendRequest({\r",
											"            url: `${baseUrl}/users/${commentAuthorUserId}/events`,\r",
											"            method: 'POST',\r",
											"            header: {'Content-Type': 'application/json'},\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    annotation: `Event for admin comment deletion ${randomSuffix}`,\r",
											"                    category: categoryData.id,\r",
											"                    description: `Description for admin comment deletion ${randomSuffix}`,\r",
											"                    eventDate: getFormattedFutureDate(3),\r",
											"                    location: { lat: 55.7604 + (randomSuffix / 1000000), lon: 37.6214 + (randomSuffix / 1000000) },\r",
											"                    commentsEnabled: true,\r",
											"                    title: `Event Admin Delete Comment ${randomSuffix}`\r",
											"                })\r",
											"            }\r",
											"        }, (errEvent, responseEvent) => {\r",
											"            if (errEvent || responseEvent.code !== 201) {\r",
											"                console.error(\"Pre-request: Не удалось создать событие:\", errEvent || responseEvent.text());\r",
											"                throw new Error(\"Pre-request: Не удалось создать событие.\");\r",
											"            }\r",
											"            const eventData = responseEvent.json();\r",
											"            eventIdForComment = eventData.id;\r",
											"            pm.environment.set(\"eventIdForAdminDeleteVerification\", eventIdForComment);\r",
											"            console.log(\"Pre-request: Событие создано:\", eventIdForComment);\r",
											"\r",
											"            pm.sendRequest({\r",
											"                url: `${baseUrl}/admin/events/${eventIdForComment}`,\r",
											"                method: 'PATCH',\r",
											"                header: {'Content-Type': 'application/json'},\r",
											"                body: { mode: 'raw', raw: JSON.stringify({ stateAction: \"PUBLISH_EVENT\" }) }\r",
											"            }, (errPublish, responsePublish) => {\r",
											"                if (errPublish || responsePublish.code !== 200) {\r",
											"                    console.error(\"Pre-request: Не удалось опубликовать событие:\", errPublish || responsePublish.text());\r",
											"                    throw new Error(\"Pre-request: Не удалось опубликовать событие.\");\r",
											"                }\r",
											"                console.log(\"Pre-request: Событие опубликовано:\", eventIdForComment);\r",
											"\r",
											"                const commentText = `Comment to be deleted by admin ${randomSuffix}`;\r",
											"                pm.sendRequest({\r",
											"                    url: `${baseUrl}/users/${commentAuthorUserId}/comments?eventId=${eventIdForComment}`,\r",
											"                    method: 'POST',\r",
											"                    header: {'Content-Type': 'application/json'},\r",
											"                    body: { mode: 'raw', raw: JSON.stringify({ text: commentText }) }\r",
											"                }, (errComment, responseComment) => {\r",
											"                    if (errComment || responseComment.code !== 201) {\r",
											"                        console.error(\"Pre-request: Не удалось создать комментарий:\", errComment || responseComment.text());\r",
											"                        throw new Error(\"Pre-request: Не удалось создать комментарий.\");\r",
											"                    }\r",
											"                    const commentData = responseComment.json();\r",
											"                    pm.environment.set(\"commentIdToDeleteByAdmin\", commentData.id);\r",
											"                    console.log(\"Pre-request: Комментарий для удаления администратором создан:\", commentData.id);\r",
											"                    console.log(\"Pre-request: Настройка для ADMIN DELETE /admin/comments/{commentId} завершена.\");\r",
											"                });\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 204 No Content\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Тело ответа пустое\", function () {\r",
											"    pm.response.to.not.have.body;\r",
											"});\r",
											"\r",
											"const deletedCommentIdByAdmin = parseInt(pm.environment.get(\"commentIdToDeleteByAdmin\"));\r",
											"const eventIdForVerification = pm.environment.get(\"eventIdForAdminDeleteVerification\");\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"pm.test(\"Проверка (Public API): 'удаленный' админом комментарий не виден публично\", function (done) {\r",
											"    if (!eventIdForVerification || isNaN(deletedCommentIdByAdmin)) {\r",
											"        pm.expect.fail(\"Необходимые ID для верификации не найдены или некорректны.\");\r",
											"    }\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/events/${eventIdForVerification}/comments`,\r",
											"        method: 'GET'\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Ошибка при верификационном GET (public):\", err);\r",
											"            pm.expect.fail(\"Ошибка при верификационном GET (public): \" + err.message);\r",
											"        }\r",
											"        pm.expect(response).to.have.status(200, \"Верификационный GET (public) должен вернуть 200 ОК\");\r",
											"        const comments = response.json();\r",
											"        let found = comments.some(comment => comment.id === deletedCommentIdByAdmin);\r",
											"        pm.expect(found).to.be.false, `Комментарий ID ${deletedCommentIdByAdmin} не должен быть найден публично после удаления админом`;\r",
											"        done();\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Проверка (Admin API): 'удаленный' комментарий виден админу с isDeleted=true\", function (done) {\r",
											"    if (isNaN(deletedCommentIdByAdmin)) {\r",
											"        pm.expect.fail(\"ID удаленного комментария некорректен для админской проверки.\");\r",
											"    }\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/admin/comments?isDeleted=false`,\r",
											"        method: 'GET'\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"                console.error(\"Ошибка при верификационном GET (admin, isDeleted=false):\", errDeleted);\r",
											"                pm.expect.fail(\"Ошибка при верификационном GET (admin, isDeleted=false): \" + errDeleted.message);\r",
											"            }\r",
											"        pm.expect(response.code).to.be.oneOf([200], \"Верификационный GET (admin, isDeleted=false) должен вернуть 200\");\r",
											"        const undeletedComments = response.json();\r",
											"        let foundAsUndeleted = false;\r",
											"        for (let i = 0; i < undeletedComments.length; i++) {\r",
											"            if (undeletedComments[i].id === deletedCommentIdByAdmin) {\r",
											"                foundAsUndeleted = true;\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"        pm.expect(foundAsUndeleted, `Комментарий ID ${deletedCommentIdByAdmin} не должен быть найден админом как неудаленный`).to.be.false;\r",
											"        \r",
											"        pm.sendRequest({\r",
											"            url: `${baseUrl}/admin/comments`,\r",
											"            method: 'GET'\r",
											"        }, function (errDeleted, responseDeleted) {\r",
											"            if (errDeleted) {\r",
											"                console.error(\"Ошибка при верификационном GET (admin):\", errDeleted);\r",
											"                pm.expect.fail(\"Ошибка при верификационном GET (admin): \" + errDeleted.message);\r",
											"            }\r",
											"            pm.expect(responseDeleted.code).to.be.oneOf([200], \"Верификационный GET (admin) должен вернуть 200\");\r",
											"            const adminComments = responseDeleted.json();\r",
											"            let foundAsDeleted = false;\r",
											"            let correctComment = null;\r",
											"            for (let i = 0; i < adminComments.length; i++) {\r",
											"                if (adminComments[i].id === deletedCommentIdByAdmin) {\r",
											"                    foundAsDeleted = true;\r",
											"                    correctComment = adminComments[i];\r",
											"                    break;\r",
											"                }\r",
											"            }\r",
											"            pm.expect(foundAsDeleted, `Комментарий ID ${deletedCommentIdByAdmin} должен быть найден админом при поиске без филтьра`).to.be.true;\r",
											"            if (correctComment) {\r",
											"                pm.expect(correctComment.isDeleted, `У комментария ID ${deletedCommentIdByAdmin} флаг isDeleted должен быть true`).to.be.true;\r",
											"            }\r",
											"            done();\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"commentIdToDeleteByAdmin\");\r",
											"    pm.environment.unset(\"eventIdForAdminDeleteVerification\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{commentIdToDeleteByAdmin}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{commentIdToDeleteByAdmin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария (админ) – Несуществующий комментарий – 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"const nonExistentCommentId = Math.floor(Math.random() * 1000000) + 9500000;\r",
											"pm.environment.set(\"nonExistentCommentIdForAdmin\", nonExistentCommentId);\r",
											"\r",
											"console.log(\"Pre-request: Установлен ID несуществующего комментария для удаления админом:\", nonExistentCommentId);\r",
											"console.log(\"Pre-request: Настройка для ADMIN DELETE несуществующего комментария завершена.\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ является валидным JSON (для ApiError)\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"const expectedNonExistentCommentId = pm.environment.get(\"nonExistentCommentIdForAdmin\");\r",
											"\r",
											"pm.test(\"Тело ответа содержит ожидаемые поля ошибки ApiError (без 'errors')\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    pm.expect(jsonData).to.have.all.keys('status', 'reason', 'message', 'timestamp');\r",
											"    pm.expect(jsonData.status).to.equal(\"NOT_FOUND\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение об ошибке (message) не пустое\", function () {\r",
											"    pm.expect(jsonData.message).to.not.be.empty;\r",
											"    console.log(\"Сообщение об ошибке: \", jsonData.message);\r",
											"});\r",
											"\r",
											"pm.test(\"Поле 'reason' (причина ошибки) не пустое\", function () {\r",
											"    pm.expect(jsonData.reason).to.not.be.empty;\r",
											"    console.log(\"Причина ошибки: \", jsonData.reason);\r",
											"});\r",
											"\r",
											"pm.test(\"Timestamp ошибки присутствует и в правильном формате\", function () {\r",
											"    pm.expect(jsonData.timestamp).to.be.a('string');\r",
											"    pm.expect(jsonData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/);\r",
											"});\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"nonExistentCommentIdForAdmin\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{nonExistentCommentIdForAdmin}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{nonExistentCommentIdForAdmin}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Восстановление комментария",
					"item": [
						{
							"name": "Восстановление комментария (админ) – Успех – 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomSuffix = Math.floor(Math.random() * 100000);\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"function getFormattedFutureDate(hoursToAdd) {\r",
											"    const date = new Date();\r",
											"    date.setHours(date.getHours() + hoursToAdd);\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const seconds = String(date.getSeconds()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r",
											"}\r",
											"\r",
											"let commentAuthorUserId;\r",
											"let eventIdForComment;\r",
											"let commentIdToManage;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${baseUrl}/admin/users`,\r",
											"    method: 'POST',\r",
											"    header: {'Content-Type': 'application/json'},\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: `testuser_admin_restore_author_${randomSuffix}@example.com`,\r",
											"            name: `TestUser AdminRestoreAuthor ${randomSuffix}`\r",
											"        })\r",
											"    }\r",
											"}, (errUser, responseUser) => {\r",
											"    if (errUser || responseUser.code !== 201) {\r",
											"        console.error(\"Pre-request: Не удалось создать пользователя (автора комментария):\", errUser || responseUser.text());\r",
											"        throw new Error(\"Pre-request: Не удалось создать пользователя (автора комментария).\");\r",
											"    }\r",
											"    const userData = responseUser.json();\r",
											"    commentAuthorUserId = userData.id;\r",
											"    pm.environment.set(\"commentAuthorIdForVerification\", commentAuthorUserId);\r",
											"    pm.environment.set(\"commentAuthorNameForVerification\", userData.name);\r",
											"    console.log(\"Pre-request: Пользователь (автор комментария) создан:\", commentAuthorUserId);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/admin/categories`,\r",
											"        method: 'POST',\r",
											"        header: {'Content-Type': 'application/json'},\r",
											"        body: { mode: 'raw', raw: JSON.stringify({ name: `Category for Admin Restore ${randomSuffix}` }) }\r",
											"     }, (errCat, responseCat) => {\r",
											"        if (errCat || responseCat.code !== 201) {\r",
											"            console.error(\"Pre-request: Не удалось создать категорию:\", errCat || responseCat.text());\r",
											"            throw new Error(\"Pre-request: Не удалось создать категорию.\");\r",
											"        }\r",
											"        const categoryData = responseCat.json();\r",
											"        console.log(\"Pre-request: Категория создана:\", categoryData.id);\r",
											"\r",
											"        pm.sendRequest({\r",
											"            url: `${baseUrl}/users/${commentAuthorUserId}/events`,\r",
											"            method: 'POST',\r",
											"            header: {'Content-Type': 'application/json'},\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    annotation: `Event for admin comment restoration ${randomSuffix}`,\r",
											"                    category: categoryData.id,\r",
											"                    description: `Description for admin comment restoration ${randomSuffix}`,\r",
											"                    eventDate: getFormattedFutureDate(3),\r",
											"                    location: { lat: 55.7605 + (randomSuffix / 1000000), lon: 37.6215 + (randomSuffix / 1000000) },\r",
											"                    commentsEnabled: true,\r",
											"                    title: `Event Admin Restore Comment ${randomSuffix}`\r",
											"                })\r",
											"            }\r",
											"        }, (errEvent, responseEvent) => {\r",
											"            if (errEvent || responseEvent.code !== 201) {\r",
											"                console.error(\"Pre-request: Не удалось создать событие:\", errEvent || responseEvent.text());\r",
											"                throw new Error(\"Pre-request: Не удалось создать событие.\");\r",
											"            }\r",
											"            const eventData = responseEvent.json();\r",
											"            eventIdForComment = eventData.id;\r",
											"            pm.environment.set(\"eventIdForAdminRestoreVerification\", eventIdForComment);\r",
											"            console.log(\"Pre-request: Событие создано:\", eventIdForComment);\r",
											"\r",
											"            pm.sendRequest({\r",
											"                url: `${baseUrl}/admin/events/${eventIdForComment}`,\r",
											"                method: 'PATCH',\r",
											"                header: {'Content-Type': 'application/json'},\r",
											"                body: { mode: 'raw', raw: JSON.stringify({ stateAction: \"PUBLISH_EVENT\" }) }\r",
											"            }, (errPublish, responsePublish) => {\r",
											"                if (errPublish || responsePublish.code !== 200) {\r",
											"                    console.error(\"Pre-request: Не удалось опубликовать событие:\", errPublish || responsePublish.text());\r",
											"                    throw new Error(\"Pre-request: Не удалось опубликовать событие.\");\r",
											"                }\r",
											"                console.log(\"Pre-request: Событие опубликовано:\", eventIdForComment);\r",
											"\r",
											"                const commentText = `Comment to be restored by admin ${randomSuffix}`;\r",
											"                pm.environment.set(\"originalCommentText\", commentText);\r",
											"                pm.sendRequest({\r",
											"                    url: `${baseUrl}/users/${commentAuthorUserId}/comments?eventId=${eventIdForComment}`,\r",
											"                    method: 'POST',\r",
											"                    header: {'Content-Type': 'application/json'},\r",
											"                    body: { mode: 'raw', raw: JSON.stringify({ text: commentText }) }\r",
											"                }, (errComment, responseComment) => {\r",
											"                    if (errComment || responseComment.code !== 201) {\r",
											"                        console.error(\"Pre-request: Не удалось создать комментарий:\", errComment || responseComment.text());\r",
											"                        throw new Error(\"Pre-request: Не удалось создать комментарий.\");\r",
											"                    }\r",
											"                    const commentData = responseComment.json();\r",
											"                    commentIdToManage = commentData.id;\r",
											"                    pm.environment.set(\"commentIdToRestoreByAdmin\", commentIdToManage);\r",
											"                    console.log(\"Pre-request: Комментарий создан:\", commentIdToManage);\r",
											"\r",
											"                    pm.sendRequest({\r",
											"                        url: `${baseUrl}/admin/comments/${commentIdToManage}`,\r",
											"                        method: 'DELETE'\r",
											"                    }, (errFirstDelete, responseFirstDelete) => {\r",
											"                        if (errFirstDelete || responseFirstDelete.code !== 204) {\r",
											"                            console.error(\"Pre-request: Первоначальное 'мягкое' удаление админом не удалось:\", errFirstDelete || responseFirstDelete.text());\r",
											"                            throw new Error(\"Pre-request: Первоначальное 'мягкое' удаление админом не удалось.\");\r",
											"                        }\r",
											"                        console.log(\"Pre-request: Комментарий успешно 'мягко' удален админом (перед восстановлением).\");\r",
											"                        console.log(\"Pre-request: Настройка для ADMIN RESTORE завершена. Основной запрос будет отправлен сейчас.\");\r",
											"                    });\r",
											"                });\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ является валидным JSON (CommentDto)\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const restoredComment = pm.response.json();\r",
											"const expectedCommentId = parseInt(pm.environment.get(\"commentIdToRestoreByAdmin\"));\r",
											"const expectedEventId = parseInt(pm.environment.get(\"eventIdForAdminRestoreVerification\"));\r",
											"const expectedAuthorId = parseInt(pm.environment.get(\"commentAuthorIdForVerification\"));\r",
											"const expectedAuthorName = pm.environment.get(\"commentAuthorNameForVerification\");\r",
											"const originalCommentText = pm.environment.get(\"originalCommentText\");\r",
											"\r",
											"pm.test(\"Структура восстановленного комментария корректна\", function () {\r",
											"    pm.expect(restoredComment).to.have.all.keys(\r",
											"        'id', 'text', 'author', 'eventId', 'createdOn', 'updatedOn', 'isEdited', 'isDeleted'\r",
											"    );\r",
											"    pm.expect(restoredComment.id).to.equal(expectedCommentId);\r",
											"    pm.expect(restoredComment.text).to.equal(originalCommentText);\r",
											"    pm.expect(restoredComment.eventId).to.equal(expectedEventId);\r",
											"    \r",
											"    pm.expect(restoredComment.author).to.be.an('object');\r",
											"    pm.expect(restoredComment.author.id).to.equal(expectedAuthorId);\r",
											"    pm.expect(restoredComment.author.name).to.equal(expectedAuthorName);\r",
											"});\r",
											"\r",
											"pm.test(\"У восстановленного комментария флаг 'isDeleted' равен false\", function () {\r",
											"    pm.expect(restoredComment.isDeleted).to.be.false;\r",
											"});\r",
											"\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"pm.test(\"Проверка (Public API): восстановленный комментарий виден публично\", function (done) {\r",
											"    if (!expectedEventId || isNaN(expectedCommentId)) {\r",
											"        pm.expect.fail(\"Необходимые ID для верификации не найдены или некорректны.\");\r",
											"        done(); return;\r",
											"    }\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/events/${expectedEventId}/comments`,\r",
											"        method: 'GET'\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Ошибка при верификационном GET (public):\", err);\r",
											"            pm.expect.fail(\"Ошибка при верификационном GET (public): \" + err.message);\r",
											"            done(); return;\r",
											"        }\r",
											"        pm.expect(response).to.have.status(200, \"Верификационный GET (public) должен вернуть 200 ОК\");\r",
											"        const comments = response.json();\r",
											"        let foundRestoredComment = comments.some(comment => \r",
											"            comment.id === expectedCommentId && comment.text === originalCommentText\r",
											"        );\r",
											"        pm.expect(foundRestoredComment, `Комментарий ID ${expectedCommentId} должен быть найден публично после восстановления`).to.be.true;\r",
											"        done();\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"commentIdToRestoreByAdmin\");\r",
											"    pm.environment.unset(\"eventIdForAdminRestoreVerification\");\r",
											"    pm.environment.unset(\"commentAuthorIdForVerification\");\r",
											"    pm.environment.unset(\"commentAuthorNameForVerification\");\r",
											"    pm.environment.unset(\"originalCommentText\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{commentIdToRestoreByAdmin}}/restore",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{commentIdToRestoreByAdmin}}",
										"restore"
									]
								}
							},
							"response": []
						},
						{
							"name": "Восстановление комментария (админ) – Комментарий не удалён – 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomSuffix = Math.floor(Math.random() * 100000);\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"function getFormattedFutureDate(hoursToAdd) {\r",
											"    const date = new Date();\r",
											"    date.setHours(date.getHours() + hoursToAdd);\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const seconds = String(date.getSeconds()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r",
											"}\r",
											"\r",
											"let commentAuthorUserId;\r",
											"let eventIdForComment;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${baseUrl}/admin/users`,\r",
											"    method: 'POST',\r",
											"    header: {'Content-Type': 'application/json'},\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: `testuser_admin_restore_nondeleted_author_${randomSuffix}@example.com`,\r",
											"            name: `TestUser AdminRestoreNonDeletedAuthor ${randomSuffix}`\r",
											"        })\r",
											"    }\r",
											"}, (errUser, responseUser) => {\r",
											"    if (errUser || responseUser.code !== 201) {\r",
											"        console.error(\"Pre-request: Не удалось создать пользователя (автора комментария):\", errUser || responseUser.text());\r",
											"        throw new Error(\"Pre-request: Не удалось создать пользователя (автора комментария).\");\r",
											"    }\r",
											"    const userData = responseUser.json();\r",
											"    commentAuthorUserId = userData.id;\r",
											"    pm.environment.set(\"commentAuthorIdForVerification\", commentAuthorUserId);\r",
											"    pm.environment.set(\"commentAuthorNameForVerification\", userData.name);\r",
											"    console.log(\"Pre-request: Пользователь (автор комментария) создан:\", commentAuthorUserId);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/admin/categories`,\r",
											"        method: 'POST',\r",
											"        header: {'Content-Type': 'application/json'},\r",
											"        body: { mode: 'raw', raw: JSON.stringify({ name: `Category for Admin Restore NonDeleted ${randomSuffix}` }) }\r",
											"     }, (errCat, responseCat) => {\r",
											"        if (errCat || responseCat.code !== 201) {\r",
											"            console.error(\"Pre-request: Не удалось создать категорию:\", errCat || responseCat.text());\r",
											"            throw new Error(\"Pre-request: Не удалось создать категорию.\");\r",
											"        }\r",
											"        const categoryData = responseCat.json();\r",
											"        console.log(\"Pre-request: Категория создана:\", categoryData.id);\r",
											"\r",
											"        pm.sendRequest({\r",
											"            url: `${baseUrl}/users/${commentAuthorUserId}/events`,\r",
											"            method: 'POST',\r",
											"            header: {'Content-Type': 'application/json'},\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    annotation: `Event for admin comment non-deleted restoration ${randomSuffix}`,\r",
											"                    category: categoryData.id,\r",
											"                    description: `Description for admin comment non-deleted restoration ${randomSuffix}`,\r",
											"                    eventDate: getFormattedFutureDate(3),\r",
											"                    location: { lat: 55.7606 + (randomSuffix / 1000000), lon: 37.6216 + (randomSuffix / 1000000) },\r",
											"                    commentsEnabled: true,\r",
											"                    title: `Event Admin Restore NonDeleted Comment ${randomSuffix}`\r",
											"                })\r",
											"            }\r",
											"        }, (errEvent, responseEvent) => {\r",
											"            if (errEvent || responseEvent.code !== 201) {\r",
											"                console.error(\"Pre-request: Не удалось создать событие:\", errEvent || responseEvent.text());\r",
											"                throw new Error(\"Pre-request: Не удалось создать событие.\");\r",
											"            }\r",
											"            const eventData = responseEvent.json();\r",
											"            eventIdForComment = eventData.id;\r",
											"            pm.environment.set(\"eventIdForAdminRestoreVerification\", eventIdForComment);\r",
											"            console.log(\"Pre-request: Событие создано:\", eventIdForComment);\r",
											"\r",
											"            pm.sendRequest({\r",
											"                url: `${baseUrl}/admin/events/${eventIdForComment}`,\r",
											"                method: 'PATCH',\r",
											"                header: {'Content-Type': 'application/json'},\r",
											"                body: { mode: 'raw', raw: JSON.stringify({ stateAction: \"PUBLISH_EVENT\" }) }\r",
											"            }, (errPublish, responsePublish) => {\r",
											"                if (errPublish || responsePublish.code !== 200) {\r",
											"                    console.error(\"Pre-request: Не удалось опубликовать событие:\", errPublish || responsePublish.text());\r",
											"                    throw new Error(\"Pre-request: Не удалось опубликовать событие.\");\r",
											"                }\r",
											"                console.log(\"Pre-request: Событие опубликовано:\", eventIdForComment);\r",
											"\r",
											"                const commentText = `Non-deleted comment for admin restore test ${randomSuffix}`;\r",
											"                pm.environment.set(\"originalCommentText\", commentText);\r",
											"                pm.sendRequest({\r",
											"                    url: `${baseUrl}/users/${commentAuthorUserId}/comments?eventId=${eventIdForComment}`,\r",
											"                    method: 'POST',\r",
											"                    header: {'Content-Type': 'application/json'},\r",
											"                    body: { mode: 'raw', raw: JSON.stringify({ text: commentText }) }\r",
											"                }, (errComment, responseComment) => {\r",
											"                    if (errComment || responseComment.code !== 201) {\r",
											"                        console.error(\"Pre-request: Не удалось создать комментарий:\", errComment || responseComment.text());\r",
											"                        throw new Error(\"Pre-request: Не удалось создать комментарий.\");\r",
											"                    }\r",
											"                    const commentData = responseComment.json();\r",
											"                    pm.environment.set(\"commentIdToRestoreByAdmin\", commentData.id);\r",
											"                    console.log(\"Pre-request: Комментарий (не удаленный) создан:\", commentData.id);\r",
											"                    console.log(\"Pre-request: Настройка для ADMIN RESTORE (неудаленного комментария) завершена.\");\r",
											"                });\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 200 OK (при 'восстановлении' не удаленного)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ является валидным JSON (CommentDto)\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const restoredComment = pm.response.json();\r",
											"const expectedCommentId = parseInt(pm.environment.get(\"commentIdToRestoreByAdmin\"));\r",
											"const expectedEventId = parseInt(pm.environment.get(\"eventIdForAdminRestoreVerification\"));\r",
											"const expectedAuthorId = parseInt(pm.environment.get(\"commentAuthorIdForVerification\"));\r",
											"const expectedAuthorName = pm.environment.get(\"commentAuthorNameForVerification\");\r",
											"const originalCommentText = pm.environment.get(\"originalCommentText\");\r",
											"const initialCreatedOn = restoredComment.createdOn;\r",
											"const initialUpdatedOn = restoredComment.updatedOn;\r",
											"\r",
											"pm.test(\"Структура комментария корректна и ID совпадает\", function () {\r",
											"    pm.expect(restoredComment).to.have.all.keys(\r",
											"        'id', 'text', 'author', 'eventId', 'createdOn', 'updatedOn', 'isEdited', 'isDeleted'\r",
											"    );\r",
											"    pm.expect(restoredComment.id).to.equal(expectedCommentId);\r",
											"    pm.expect(restoredComment.text).to.equal(originalCommentText);\r",
											"    pm.expect(restoredComment.eventId).to.equal(expectedEventId);\r",
											"    \r",
											"    pm.expect(restoredComment.author).to.be.an('object');\r",
											"    pm.expect(restoredComment.author.id).to.equal(expectedAuthorId);\r",
											"    pm.expect(restoredComment.author.name).to.equal(expectedAuthorName);\r",
											"});\r",
											"\r",
											"pm.test(\"У комментария флаг 'isDeleted' равен false (как и был)\", function () {\r",
											"    pm.expect(restoredComment.isDeleted).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Время обновления 'updatedOn' не изменилось или осталось null (если не было обновлений)\", function () {\r",
											"    pm.expect(restoredComment.updatedOn).to.equal(initialUpdatedOn);\r",
											"});\r",
											" pm.test(\"Флаг 'isEdited' не изменился\", function () {\r",
											"    pm.expect(restoredComment.isEdited).to.be.false;\r",
											"});\r",
											"\r",
											"\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"pm.test(\"Проверка (Public API): 'восстановленный' (не удаленный) комментарий по-прежнему виден публично\", function (done) {\r",
											"    if (!expectedEventId || isNaN(expectedCommentId)) {\r",
											"        pm.expect.fail(\"Необходимые ID для верификации не найдены или некорректны.\");\r",
											"        done(); return;\r",
											"    }\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/events/${expectedEventId}/comments`,\r",
											"        method: 'GET'\r",
											"    }, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(\"Ошибка при верификационном GET (public):\", err);\r",
											"            pm.expect.fail(\"Ошибка при верификационном GET (public): \" + err.message);\r",
											"            done(); return;\r",
											"        }\r",
											"        pm.expect(response).to.have.status(200, \"Верификационный GET (public) должен вернуть 200 ОК\");\r",
											"        const comments = response.json();\r",
											"        let foundComment = comments.some(comment => \r",
											"            comment.id === expectedCommentId && comment.text === originalCommentText\r",
											"        );\r",
											"        pm.expect(foundComment, `Комментарий ID ${expectedCommentId} должен быть найден публично`).to.be.true;\r",
											"        done();\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"commentIdToRestoreByAdmin\");\r",
											"    pm.environment.unset(\"eventIdForAdminRestoreVerification\");\r",
											"    pm.environment.unset(\"commentAuthorIdForVerification\");\r",
											"    pm.environment.unset(\"commentAuthorNameForVerification\");\r",
											"    pm.environment.unset(\"originalCommentText\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{commentIdToRestoreByAdmin}}/restore",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{commentIdToRestoreByAdmin}}",
										"restore"
									]
								}
							},
							"response": []
						},
						{
							"name": "Восстановление комментария (админ) – Несуществующий комментарий – 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"const nonExistentCommentId = Math.floor(Math.random() * 1000000) + 9600000;\r",
											"pm.environment.set(\"nonExistentCommentIdForAdminRestore\", nonExistentCommentId);\r",
											"\r",
											"console.log(\"Pre-request: Установлен ID несуществующего комментария для 'восстановления' админом:\", nonExistentCommentId);\r",
											"console.log(\"Pre-request: Настройка для ADMIN RESTORE несуществующего комментария завершена.\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ является валидным JSON (для ApiError)\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"const expectedNonExistentCommentId = pm.environment.get(\"nonExistentCommentIdForAdminRestore\");\r",
											"\r",
											"pm.test(\"Тело ответа содержит ожидаемые поля ошибки ApiError (без 'errors')\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    pm.expect(jsonData).to.have.all.keys('status', 'reason', 'message', 'timestamp');\r",
											"    pm.expect(jsonData.status).to.equal(\"NOT_FOUND\");\r",
											"});\r",
											"\r",
											"pm.test(\"Сообщение об ошибке (message) не пустое\", function () {\r",
											"    pm.expect(jsonData.message).to.not.be.empty;\r",
											"    console.log(\"Сообщение об ошибке: \", jsonData.message);\r",
											"});\r",
											"\r",
											"pm.test(\"Поле 'reason' (причина ошибки) не пустое\", function () {\r",
											"    pm.expect(jsonData.reason).to.not.be.empty;\r",
											"    console.log(\"Причина ошибки: \", jsonData.reason);\r",
											"});\r",
											"\r",
											"pm.test(\"Timestamp ошибки присутствует и в правильном формате\", function () {\r",
											"    pm.expect(jsonData.timestamp).to.be.a('string');\r",
											"    pm.expect(jsonData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/);\r",
											"});\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"nonExistentCommentIdForAdminRestore\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{nonExistentCommentIdForAdminRestore}}/restore",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{nonExistentCommentIdForAdminRestore}}",
										"restore"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Получение комметариев",
					"item": [
						{
							"name": "Получение комментариев (админ) – Без фильтров – 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomSuffix = Math.floor(Math.random() * 100000);\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"const numberOfUsers = 2;\r",
											"const numberOfEventsPerUser = 1;\r",
											"const numberOfCommentsPerEvent = 2;\r",
											"const commentCreationDelay = 25;\r",
											"\r",
											"let createdUsers = [];\r",
											"let createdEvents = [];\r",
											"let allCreatedComments = [];\r",
											"\r",
											"let usersToCreate = numberOfUsers;\r",
											"let eventsToCreateTotal = numberOfUsers * numberOfEventsPerUser;\r",
											"let commentsToCreateTotal = eventsToCreateTotal * numberOfCommentsPerEvent;\r",
											"\r",
											"let usersCreatedCount = 0;\r",
											"let eventsCreatedCount = 0;\r",
											"let commentsCreatedCount = 0;\r",
											"\r",
											"function getFormattedFutureDate(hoursToAdd) {\r",
											"    const date = new Date();\r",
											"    date.setHours(date.getHours() + hoursToAdd);\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const seconds = String(date.getSeconds()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r",
											"}\r",
											"\r",
											"function checkCompletion() {\r",
											"    if (usersCreatedCount === usersToCreate && \r",
											"        eventsCreatedCount === eventsToCreateTotal &&\r",
											"        commentsCreatedCount === commentsToCreateTotal) {\r",
											"        \r",
											"        allCreatedComments.sort((a, b) => {\r",
											"            const dateA = new Date(a.createdOn.replace(' ', 'T') + 'Z').getTime();\r",
											"            const dateB = new Date(b.createdOn.replace(' ', 'T') + 'Z').getTime();\r",
											"            if (dateB !== dateA) return dateB - dateA;\r",
											"            return b.id - a.id;\r",
											"        });\r",
											"        pm.environment.set(\"allCreatedCommentsForAdminGet\", JSON.stringify(allCreatedComments));\r",
											"        console.log(\"AdminGet PreReq: All entities created and data set for test.\");\r",
											"        console.log(\"Created comments:\", JSON.stringify(allCreatedComments, null, 2));\r",
											"    }\r",
											"}\r",
											"\r",
											"function createComment(user, event, commentIndexInEvent, totalCommentsForThisEvent, isActuallyDeleted) {\r",
											"    const commentText = `Comment ${commentIndexInEvent} by U${user.id} on E${event.id} ${isActuallyDeleted ? '(del)' : ''} ${randomSuffix}`;\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/users/${user.id}/comments?eventId=${event.id}`, method: 'POST',\r",
											"        header: {'Content-Type': 'application/json'}, body: {mode: 'raw', raw: JSON.stringify({text: commentText})}\r",
											"    }, (err, res) => {\r",
											"        if (err || res.code !== 201) {\r",
											"            console.error(\"AdminGet PreReq: Comment creation failed\", err || res.text());\r",
											"            throw new Error(\"AdminGet PreReq: Comment creation failed\");\r",
											"        }\r",
											"        const commentData = res.json();\r",
											"        let finalCommentData = {...commentData, author: {id: user.id, name: user.name}, isDeleted: false};\r",
											"\r",
											"        if (isActuallyDeleted) {\r",
											"            pm.sendRequest({ url: `${baseUrl}/admin/comments/${commentData.id}`, method: 'DELETE'}, (errDel, resDel) => {\r",
											"                if (errDel || resDel.code !== 204) {\r",
											"                    console.error(\"AdminGet PreReq: Admin comment soft delete failed\", errDel || resDel.text());\r",
											"                    throw new Error(\"AdminGet PreReq: Admin comment soft delete failed\");\r",
											"                } else { finalCommentData.isDeleted = true; }\r",
											"                allCreatedComments.push(finalCommentData);\r",
											"                commentsCreatedCount++;\r",
											"                console.log(`AdminGet PreReq: Comment ${commentData.id} (createdOn: ${commentData.createdOn}, isDel:${finalCommentData.isDeleted}) created.`);\r",
											"                checkCompletion();\r",
											"            });\r",
											"        } else {\r",
											"            allCreatedComments.push(finalCommentData);\r",
											"            commentsCreatedCount++;\r",
											"            console.log(`AdminGet PreReq: Comment ${commentData.id} (createdOn: ${commentData.createdOn}, isDel:${finalCommentData.isDeleted}) created.`);\r",
											"            checkCompletion();\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${baseUrl}/admin/categories`, method: 'POST', header: {'Content-Type': 'application/json'},\r",
											"    body: { mode: 'raw', raw: JSON.stringify({ name: `Category AdminGetComments ${randomSuffix}` })}\r",
											"}, (errCat, resCat) => {\r",
											"    if (errCat || resCat.code !== 201) {\r",
											"        console.error(\"AdminGet PreReq: Category creation failed\", errCat || resCat.text());\r",
											"        throw new Error(\"AdminGet PreReq: Category creation failed\");\r",
											"    }\r",
											"    const category = resCat.json();\r",
											"\r",
											"    for (let i = 0; i < numberOfUsers; i++) {\r",
											"        pm.sendRequest({\r",
											"            url: `${baseUrl}/admin/users`, method: 'POST', header: {'Content-Type': 'application/json'},\r",
											"            body: { mode: 'raw', raw: JSON.stringify({\r",
											"                email: `testuser_adminget_${i}_${randomSuffix}@example.com`,\r",
											"                name: `TestUser AdminGet ${i} ${randomSuffix}`\r",
											"            })}\r",
											"        }, (errUser, resUser) => {\r",
											"            if (errUser || resUser.code !== 201) {\r",
											"                console.error(\"AdminGet PreReq: User creation failed\", errUser || resUser.text());\r",
											"                throw new Error(\"AdminGet PreReq: User creation failed\");\r",
											"            }\r",
											"            const user = resUser.json();\r",
											"            createdUsers.push(user);\r",
											"            usersCreatedCount++;\r",
											"\r",
											"            for (let j = 0; j < numberOfEventsPerUser; j++) {\r",
											"                pm.sendRequest({\r",
											"                    url: `${baseUrl}/users/${user.id}/events`, method: 'POST', header: {'Content-Type': 'application/json'},\r",
											"                    body: { mode: 'raw', raw: JSON.stringify({\r",
											"                        title: `Event ${j} by U${user.id} AG ${randomSuffix}`,\r",
											"                        annotation: `Annotation with sufficient length ${randomSuffix}`, category: category.id, description: `Description with sufficient length ${randomSuffix}`,\r",
											"                        eventDate: getFormattedFutureDate(3 + j), location: { lat: 55.7 + (j/100), lon: 37.6 + (j/100) },\r",
											"                        commentsEnabled: true\r",
											"                    })}\r",
											"                }, (errEvt, resEvt) => {\r",
											"                    if (errEvt || resEvt.code !== 201) {\r",
											"                        console.error(\"AdminGet PreReq: Event creation failed\", errEvt || resEvt.text());\r",
											"                        throw new Error(\"AdminGet PreReq: Event creation failed\");\r",
											"                    }\r",
											"                    const event = resEvt.json();\r",
											"                    \r",
											"                    pm.sendRequest({\r",
											"                        url: `${baseUrl}/admin/events/${event.id}`, method: 'PATCH', header: {'Content-Type': 'application/json'},\r",
											"                        body: { mode: 'raw', raw: JSON.stringify({ stateAction: \"PUBLISH_EVENT\" })}\r",
											"                    }, (errPub, resPub) => {\r",
											"                        if (errPub || resPub.code !== 200) {\r",
											"                            console.error(\"AdminGet PreReq: Event publish failed\", errPub || resPub.text());\r",
											"                            throw new Error(\"AdminGet PreReq: Event publish failed\");\r",
											"                        }\r",
											"                        createdEvents.push(event);\r",
											"                        eventsCreatedCount++;\r",
											"                        \r",
											"                        for (let k = 0; k < numberOfCommentsPerEvent; k++) {\r",
											"                            const shouldBeDeleted = (k % 2 === 0);\r",
											"                            setTimeout(() => createComment(user, event, k, numberOfCommentsPerEvent, shouldBeDeleted), ((((i * numberOfEventsPerUser) + j) * numberOfCommentsPerEvent) + k) * commentCreationDelay);\r",
											"                        }\r",
											"                        checkCompletion();\r",
											"                    });\r",
											"                });\r",
											"            }\r",
											"            checkCompletion();\r",
											"        });\r",
											"    }\r",
											"    checkCompletion();\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ является валидным JSON и представляет собой массив\", function () {\r",
											"    pm.response.to.be.json;\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"const returnedComments = pm.response.json();\r",
											"const allExpectedComments = JSON.parse(pm.environment.get(\"allCreatedCommentsForAdminGet\") || \"[]\");\r",
											"\r",
											"const defaultPageSize = 10;\r",
											"const expectedCountOnDefaultPage = Math.min(allExpectedComments.length, defaultPageSize);\r",
											"\r",
											"pm.test(`Возвращено не более ${defaultPageSize} комментариев (пагинация по умолчанию)`, function () {\r",
											"    pm.expect(returnedComments.length).to.at.most(defaultPageSize);\r",
											"});\r",
											"\r",
											"if (returnedComments.length > 0) {\r",
											"    pm.test(\"Структура каждого комментария в ответе корректна (включая isDeleted)\", function () {\r",
											"        returnedComments.forEach(function(comment, index) {\r",
											"            pm.expect(comment, `Комментарий #${index}`).to.have.all.keys(\r",
											"                'id', 'text', 'author', 'eventId', 'createdOn', 'updatedOn', 'isEdited', 'isDeleted'\r",
											"            );\r",
											"            pm.expect(comment.id, `ID комментария #${index}`).to.be.a('number');\r",
											"            pm.expect(comment.text, `Текст комментария #${index}`).to.be.a('string');\r",
											"            \r",
											"            pm.expect(comment.author, `Автор комментария #${index}`).to.be.an('object');\r",
											"            pm.expect(comment.author.id, `ID автора комментария #${index}`).to.be.a('number');\r",
											"            pm.expect(comment.author.name, `Имя автора комментария #${index}`).to.be.a('string');\r",
											"\r",
											"            pm.expect(comment.eventId, `ID события комментария #${index}`).to.be.a('number');\r",
											"            pm.expect(comment.createdOn, `Время создания комментария #${index}`).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/);\r",
											"            pm.expect(comment.isEdited, `Флаг isEdited комментария #${index}`).to.be.a('boolean');\r",
											"            pm.expect(comment.isDeleted, `Флаг isDeleted комментария #${index}`).to.be.a('boolean');\r",
											"        });\r",
											"    });\r",
											"\r",
											"    pm.test(\"Полученные комментарии соответствуют ожидаемым (самые свежие, пагинация по умолчанию)\", function() {\r",
											"        for(let i=0; i < allExpectedComments.length; i++) {\r",
											"            const returned = returnedComments[i];\r",
											"            const expected = allExpectedComments[i];\r",
											"            pm.expect(returned.id, `ID комментария ${i}`).to.equal(expected.id);\r",
											"            pm.expect(returned.text, `Текст комментария ${i}`).to.equal(expected.text);\r",
											"            pm.expect(returned.author.id, `Author ID ${i}`).to.equal(expected.author.id);\r",
											"            pm.expect(returned.eventId, `Event ID ${i}`).to.equal(expected.eventId);\r",
											"            pm.expect(returned.isDeleted, `isDeleted ${i}`).to.equal(expected.isDeleted);\r",
											"        }\r",
											"    });\r",
											"} else if (allExpectedComments.length > 0) {\r",
											"    pm.test(\"Ожидались комментарии, но получен пустой массив (без фильтров)\", function() {\r",
											"        pm.expect.fail(\"Созданные комментарии не были возвращены.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"allCreatedCommentsForAdminGet\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение комментариев (админ) – Конкретный пользователь, Удалённые – 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomSuffix = Math.floor(Math.random() * 100000);\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"const numCommentsTargetUser = 7;\r",
											"const numDeletedTargetUser = 5;\r",
											"const numCommentsOtherUser = 3;\r",
											"\r",
											"let targetUserData, otherUserData;\r",
											"let categoryDataGlobal;\r",
											"let targetUserEvents = [];\r",
											"let otherUserEvents = [];\r",
											"let allCreatedCommentsForTest = [];\r",
											"\r",
											"function getFormattedFutureDate(hoursToAdd) {\r",
											"    const date = new Date();\r",
											"    date.setHours(date.getHours() + hoursToAdd);\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const seconds = String(date.getSeconds()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r",
											"}\r",
											"\r",
											"function createUser(emailPrefix, namePrefix, callback) {\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/admin/users`, method: 'POST', header: {'Content-Type': 'application/json'},\r",
											"        body: { mode: 'raw', raw: JSON.stringify({\r",
											"            email: `${emailPrefix}_${randomSuffix}@example.com`,\r",
											"            name: `${namePrefix} ${randomSuffix}`\r",
											"        })}\r",
											"    }, (err, res) => {\r",
											"        if (err || res.code !== 201) { console.error(`PreReq: User creation failed for ${namePrefix}`, err || res.text()); throw new Error(\"User creation failed\"); }\r",
											"        const user = res.json();\r",
											"        console.log(`PreReq: User ${user.id} (${namePrefix}) created.`);\r",
											"        callback(user);\r",
											"    });\r",
											"}\r",
											"\r",
											"function createCategory(callback) {\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/admin/categories`, method: 'POST', header: {'Content-Type': 'application/json'},\r",
											"        body: { mode: 'raw', raw: JSON.stringify({ name: `Category AdminGet DeletedByUser ${randomSuffix}` })}\r",
											"    }, (err, res) => {\r",
											"        if (err || res.code !== 201) { console.error(\"PreReq: Category creation failed\", err || res.text()); throw new Error(\"Category creation failed\"); }\r",
											"        categoryDataGlobal = res.json();\r",
											"        console.log(\"PreReq: Category created.\");\r",
											"        callback(categoryDataGlobal);\r",
											"    });\r",
											"}\r",
											"\r",
											"function createEvent(user, category, eventIndex, callback) {\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/users/${user.id}/events`, method: 'POST', header: {'Content-Type': 'application/json'},\r",
											"        body: { mode: 'raw', raw: JSON.stringify({\r",
											"            title: `Event ${eventIndex} by User ${user.id} ADGDBU ${randomSuffix}`,\r",
											"            annotation: `Annotation with sufficient length ${randomSuffix}`, category: category.id, description: `Description with sufficient length ${randomSuffix}`,\r",
											"            eventDate: getFormattedFutureDate(3 + eventIndex), location: { lat: 55.71 + (eventIndex/100), lon: 37.61 + (eventIndex/100) },\r",
											"            commentsEnabled: true\r",
											"        })}\r",
											"    }, (err, res) => {\r",
											"        if (err || res.code !== 201) { console.error(`PreReq: Event creation failed for User ${user.id}`, err || res.text()); throw new Error(\"Event creation failed\"); }\r",
											"        const eventData = res.json();\r",
											"        pm.sendRequest({\r",
											"            url: `${baseUrl}/admin/events/${eventData.id}`, method: 'PATCH', header: {'Content-Type': 'application/json'},\r",
											"            body: { mode: 'raw', raw: JSON.stringify({ stateAction: \"PUBLISH_EVENT\" })}\r",
											"        }, (errPub, resPub) => {\r",
											"            if (errPub || resPub.code !== 200) { console.error(\"PreReq: Event publish failed\", errPub || resPub.text()); throw new Error(\"Event publish failed\"); }\r",
											"            console.log(`PreReq: Event ${eventData.id} (User ${user.id}) created and published.`);\r",
											"            callback(eventData);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"function createCommentChain(user, events, numTotal, numToDelete, commentPrefix, finalCallback) {\r",
											"    let commentsCreated = 0;\r",
											"    let localComments = [];\r",
											"\r",
											"    function addComment(index) {\r",
											"        if (index >= numTotal) {\r",
											"            finalCallback(localComments);\r",
											"            return;\r",
											"        }\r",
											"        const eventForComment = events[index % events.length];\r",
											"        const text = `${commentPrefix} ${index} on Evt ${eventForComment.id} ${randomSuffix}`;\r",
											"        const shouldDelete = index < numToDelete;\r",
											"\r",
											"        pm.sendRequest({\r",
											"            url: `${baseUrl}/users/${user.id}/comments?eventId=${eventForComment.id}`, method: 'POST',\r",
											"            header: {'Content-Type': 'application/json'}, body: {mode: 'raw', raw: JSON.stringify({text: text})}\r",
											"        }, (err, res) => {\r",
											"            if (err || res.code !== 201) { console.error(`PreReq: Comment creation failed for ${text}`, err || res.text()); throw new Error(\"Comment creation failed\"); }\r",
											"            let comment = res.json();\r",
											"            comment.author = { id: user.id, name: user.name };\r",
											"            comment.isDeleted = false;\r",
											"\r",
											"            if (shouldDelete) {\r",
											"                pm.sendRequest({\r",
											"                    url: `${baseUrl}/admin/comments/${comment.id}`, method: 'DELETE'\r",
											"                }, (errDel, resDel) => {\r",
											"                    if (errDel || resDel.code !== 204) { console.error(`PreReq: Soft delete failed for comment ${comment.id}`, errDel || resDel.text()); throw new Error(\"Soft delete failed\"); }\r",
											"                    comment.isDeleted = true;\r",
											"                    console.log(`PreReq: Comment ${comment.id} (User ${user.id}) created and soft-deleted.`);\r",
											"                    localComments.push(comment);\r",
											"                    allCreatedCommentsForTest.push(comment);\r",
											"                    addComment(index + 1);\r",
											"                });\r",
											"            } else {\r",
											"                console.log(`PreReq: Comment ${comment.id} (User ${user.id}) created (not deleted).`);\r",
											"                localComments.push(comment);\r",
											"                allCreatedCommentsForTest.push(comment);\r",
											"                addComment(index + 1);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"    addComment(0);\r",
											"}\r",
											"\r",
											"createCategory(category => {\r",
											"    createUser(\"target_user_adgdbu\", \"TargetUser ADGDBU\", targetUser => {\r",
											"        targetUserData = targetUser;\r",
											"        pm.environment.set(\"targetUserId\", targetUser.id);\r",
											"\r",
											"        createUser(\"other_user_adgdbu\", \"OtherUser ADGDBU\", otherUser => {\r",
											"            otherUserData = otherUser;\r",
											"\r",
											"            createEvent(targetUser, category, 0, eventT1 => {\r",
											"                targetUserEvents.push(eventT1);\r",
											"                createEvent(targetUser, category, 1, eventT2 => {\r",
											"                    targetUserEvents.push(eventT2);\r",
											"                    \r",
											"                    createEvent(otherUser, category, 0, eventO1 => {\r",
											"                        otherUserEvents.push(eventO1);\r",
											"\r",
											"                        createCommentChain(targetUser, targetUserEvents, numCommentsTargetUser, numDeletedTargetUser, \"TargetC\", targetUserComments => {\r",
											"                            createCommentChain(otherUser, otherUserEvents, numCommentsOtherUser, 1, \"OtherC\", otherUserComments => {\r",
											"                                \r",
											"                                let expectedResult = allCreatedCommentsForTest.filter(c => \r",
											"                                    c.author.id === targetUserData.id && c.isDeleted === true\r",
											"                                );\r",
											"                                expectedResult.sort((a, b) => {\r",
											"                                    const dateA = new Date(a.createdOn.replace(' ', 'T') + 'Z').getTime();\r",
											"                                    const dateB = new Date(b.createdOn.replace(' ', 'T') + 'Z').getTime();\r",
											"                                    if (dateB !== dateA) return dateB - dateA;\r",
											"                                    return b.id - a.id;\r",
											"                                });\r",
											"                                \r",
											"                                pm.environment.set(\"expectedDeletedCommentsForTargetUser\", JSON.stringify(expectedResult));\r",
											"                                console.log(\"PreReq: All entities created. Expected target user's deleted comments count: \" + expectedResult.length);\r",
											"                                console.log(\"PreReq: Setup complete for GET deleted comments by user.\");\r",
											"                            });\r",
											"                        });\r",
											"                    });\r",
											"                });\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ является валидным JSON и представляет собой массив\", function () {\r",
											"    pm.response.to.be.json;\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"const returnedComments = pm.response.json();\r",
											"const targetUserId = parseInt(pm.environment.get(\"targetUserId\"));\r",
											"const allExpectedForTargetUserAndDeleted = JSON.parse(pm.environment.get(\"expectedDeletedCommentsForTargetUser\") || \"[]\");\r",
											"\r",
											"const requestSize = 5;\r",
											"const expectedCountOnPage = Math.min(allExpectedForTargetUserAndDeleted.length, requestSize);\r",
											"\r",
											"pm.test(`Возвращено ${expectedCountOnPage} комментариев (согласно size=${requestSize} и фильтрам)`, function () {\r",
											"    pm.expect(returnedComments.length).to.equal(expectedCountOnPage);\r",
											"});\r",
											"\r",
											"if (returnedComments.length > 0) {\r",
											"    pm.test(\"Все возвращенные комментарии принадлежат targetUserId и имеют isDeleted=true\", function () {\r",
											"        returnedComments.forEach(function(comment, index) {\r",
											"            pm.expect(comment, `Комментарий #${index}`).to.have.all.keys(\r",
											"                'id', 'text', 'author', 'eventId', 'createdOn', 'updatedOn', 'isEdited', 'isDeleted'\r",
											"            );\r",
											"            pm.expect(comment.author.id, `ID автора комментария #${index}`).to.equal(targetUserId);\r",
											"            pm.expect(comment.isDeleted, `Флаг isDeleted комментария #${index}`).to.be.true;\r",
											"        });\r",
											"    });\r",
											"\r",
											"    pm.test(\"Содержимое и порядок комментариев соответствуют ожидаемым\", function() {\r",
											"        const expectedSlice = allExpectedForTargetUserAndDeleted.slice(0, requestSize);\r",
											"\r",
											"        pm.expect(returnedComments.length).to.equal(expectedSlice.length, \"Длина полученного массива должна совпадать с ожидаемым срезом\");\r",
											"\r",
											"        returnedComments.forEach((returned, i) => {\r",
											"            const expected = expectedSlice[i];\r",
											"            if (!expected) {\r",
											"                pm.expect.fail(`Ожидаемый комментарий с индексом ${i} отсутствует в expectedSlice`);\r",
											"                return;\r",
											"            }\r",
											"            pm.expect(returned.id, `ID комментария ${i}`).to.equal(expected.id);\r",
											"            pm.expect(returned.text, `Текст комментария ${i}`).to.equal(expected.text);\r",
											"            pm.expect(returned.author.id, `Author ID ${i}`).to.equal(expected.author.id);\r",
											"            pm.expect(returned.eventId, `Event ID ${i}`).to.equal(expected.eventId);\r",
											"            pm.expect(returned.isDeleted, `isDeleted ${i}`).to.be.true;\r",
											"        });\r",
											"    });\r",
											"\r",
											"} else if (expectedCountOnPage > 0) {\r",
											"    pm.test(\"Ожидались комментарии, но получен пустой массив (с фильтрами userId, isDeleted)\", function() {\r",
											"        pm.expect.fail(\"Созданные и удаленные комментарии целевого пользователя не были возвращены.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"targetUserId\");\r",
											"    pm.environment.unset(\"expectedDeletedCommentsForTargetUser\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments?userId={{targetUserId}}&isDeleted=true&from=0&size=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{targetUserId}}"
										},
										{
											"key": "isDeleted",
											"value": "true"
										},
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение комментариев (админ) – Конкретное событие, Не-удалённые, 2-я страница  – 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomSuffix = Math.floor(Math.random() * 100000);\r",
											"const baseUrl = pm.collectionVariables.get(\"baseUrl\");\r",
											"\r",
											"const numNonDeletedForTargetEvent = 7;\r",
											"const numDeletedForTargetEvent = 2;\r",
											"const numCommentsForOtherEvent = 3;\r",
											"\r",
											"const fromParamForTest = 3;\r",
											"const sizeParamForTest = 3;\r",
											"\r",
											"let mainTestUser, categoryDataGlobal;\r",
											"let targetEventData, otherEventData;\r",
											"let allCreatedCommentsForTest = [];\r",
											"\r",
											"function getFormattedFutureDate(hoursToAdd) {\r",
											"    const date = new Date();\r",
											"    date.setHours(date.getHours() + hoursToAdd);\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const seconds = String(date.getSeconds()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r",
											"}\r",
											"\r",
											"function createUser(emailPrefix, namePrefix, callback) {\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/admin/users`, method: 'POST', header: {'Content-Type': 'application/json'},\r",
											"        body: { mode: 'raw', raw: JSON.stringify({\r",
											"            email: `${emailPrefix}_${randomSuffix}@example.com`,\r",
											"            name: `${namePrefix} ${randomSuffix}`\r",
											"        })}\r",
											"    }, (err, res) => {\r",
											"        if (err || res.code !== 201) { console.error(`PreReq: User creation failed for ${namePrefix}`, err || res.text()); throw new Error(\"User creation failed\"); }\r",
											"        const user = res.json();\r",
											"        console.log(`PreReq: User ${user.id} (${namePrefix}) created.`);\r",
											"        callback(user);\r",
											"    });\r",
											"}\r",
											"\r",
											"function createCategory(callback) {\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/admin/categories`, method: 'POST', header: {'Content-Type': 'application/json'},\r",
											"        body: { mode: 'raw', raw: JSON.stringify({ name: `Category AdminGet EvtPage ${randomSuffix}` })}\r",
											"    }, (err, res) => {\r",
											"        if (err || res.code !== 201) { console.error(\"PreReq: Category creation failed\", err || res.text()); throw new Error(\"Category creation failed\"); }\r",
											"        categoryDataGlobal = res.json();\r",
											"        console.log(\"PreReq: Category created.\");\r",
											"        callback(categoryDataGlobal);\r",
											"    });\r",
											"}\r",
											"\r",
											"function createEvent(user, category, eventNameSuffix, callback) {\r",
											"    pm.sendRequest({\r",
											"        url: `${baseUrl}/users/${user.id}/events`, method: 'POST', header: {'Content-Type': 'application/json'},\r",
											"        body: { mode: 'raw', raw: JSON.stringify({\r",
											"            title: `Event ${eventNameSuffix} ADGEP ${randomSuffix}`,\r",
											"            annotation: `Annotation with sufficient length ${randomSuffix}`, category: category.id, description: `Description with sufficient length ${randomSuffix}`,\r",
											"            eventDate: getFormattedFutureDate(3 + parseInt(eventNameSuffix.slice(-1))), location: { lat: 55.72 + (parseInt(eventNameSuffix.slice(-1))/100), lon: 37.62 + (parseInt(eventNameSuffix.slice(-1))/100) },\r",
											"            commentsEnabled: true\r",
											"        })}\r",
											"    }, (err, res) => {\r",
											"        if (err || res.code !== 201) { console.error(`PreReq: Event creation failed for ${eventNameSuffix}`, err || res.text()); throw new Error(\"Event creation failed\"); }\r",
											"        const eventData = res.json();\r",
											"        pm.sendRequest({\r",
											"            url: `${baseUrl}/admin/events/${eventData.id}`, method: 'PATCH', header: {'Content-Type': 'application/json'},\r",
											"            body: { mode: 'raw', raw: JSON.stringify({ stateAction: \"PUBLISH_EVENT\" })}\r",
											"        }, (errPub, resPub) => {\r",
											"            if (errPub || resPub.code !== 200) { console.error(\"PreReq: Event publish failed\", errPub || resPub.text()); throw new Error(\"Event publish failed\"); }\r",
											"            console.log(`PreReq: Event ${eventData.id} (${eventNameSuffix}) created and published.`);\r",
											"            callback(eventData);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"function createCommentChainForEvent(user, event, numTotal, numToDelete, commentPrefix, finalCallback) {\r",
											"    let commentsCreated = 0;\r",
											"    let localComments = [];\r",
											"\r",
											"    function addComment(index) {\r",
											"        if (index >= numTotal) {\r",
											"            finalCallback(localComments);\r",
											"            return;\r",
											"        }\r",
											"        const text = `${commentPrefix} ${index} on Evt ${event.id} ${randomSuffix}`;\r",
											"        const shouldDelete = index < numToDelete;\r",
											"\r",
											"        pm.sendRequest({\r",
											"            url: `${baseUrl}/users/${user.id}/comments?eventId=${event.id}`, method: 'POST',\r",
											"            header: {'Content-Type': 'application/json'}, body: {mode: 'raw', raw: JSON.stringify({text: text})}\r",
											"        }, (err, res) => {\r",
											"            if (err || res.code !== 201) { console.error(`PreReq: Comment creation failed for ${text}`, err || res.text()); throw new Error(\"Comment creation failed\"); }\r",
											"            let comment = res.json();\r",
											"            comment.author = { id: user.id, name: user.name };\r",
											"            comment.isDeleted = false;\r",
											"\r",
											"            if (shouldDelete) {\r",
											"                pm.sendRequest({\r",
											"                    url: `${baseUrl}/admin/comments/${comment.id}`, method: 'DELETE'\r",
											"                }, (errDel, resDel) => {\r",
											"                    if (errDel || resDel.code !== 204) { console.error(`PreReq: Soft delete failed for comment ${comment.id}`, errDel || resDel.text()); throw new Error(\"Soft delete failed\"); }\r",
											"                    comment.isDeleted = true;\r",
											"                    console.log(`PreReq: Comment ${comment.id} (User ${user.id}, Evt ${event.id}) created and soft-deleted.`);\r",
											"                    localComments.push(comment);\r",
											"                    allCreatedCommentsForTest.push(comment);\r",
											"                    addComment(index + 1);\r",
											"                });\r",
											"            } else {\r",
											"                console.log(`PreReq: Comment ${comment.id} (User ${user.id}, Evt ${event.id}) created (not deleted).`);\r",
											"                localComments.push(comment);\r",
											"                allCreatedCommentsForTest.push(comment);\r",
											"                addComment(index + 1);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"    addComment(0);\r",
											"}\r",
											"\r",
											"createCategory(category => {\r",
											"    createUser(\"main_user_adgep\", \"MainUser ADGEP\", user => {\r",
											"        mainTestUser = user;\r",
											"\r",
											"        createEvent(user, category, \"TargetEvent1\", targetEvent => {\r",
											"            targetEventData = targetEvent;\r",
											"            pm.environment.set(\"targetEventId\", targetEvent.id);\r",
											"\r",
											"            createEvent(user, category, \"OtherEvent2\", otherEvent => {\r",
											"                otherEventData = otherEvent;\r",
											"\r",
											"                createCommentChainForEvent(mainTestUser, targetEventData, \r",
											"                                          numNonDeletedForTargetEvent + numDeletedForTargetEvent, \r",
											"                                          numDeletedForTargetEvent, \r",
											"                                          \"TargetEvtC\", \r",
											"                                          targetEventComments => {\r",
											"                    createCommentChainForEvent(mainTestUser, otherEventData, \r",
											"                                              numCommentsForOtherEvent, \r",
											"                                              1,\r",
											"                                              \"OtherEvtC\", \r",
											"                                              otherEventComments => {\r",
											"                        \r",
											"                        let expectedResult = allCreatedCommentsForTest.filter(c => \r",
											"                            c.eventId === targetEventData.id && c.isDeleted === false\r",
											"                        );\r",
											"                        \r",
											"                        expectedResult.sort((a, b) => {\r",
											"                            const dateA = new Date(a.createdOn.replace(' ', 'T') + 'Z').getTime();\r",
											"                            const dateB = new Date(b.createdOn.replace(' ', 'T') + 'Z').getTime();\r",
											"                            if (dateB !== dateA) return dateB - dateA;\r",
											"                            return b.id - a.id;\r",
											"                        });\r",
											"                        \r",
											"                        pm.environment.set(\"expectedNonDeletedForTargetEvent\", JSON.stringify(expectedResult));\r",
											"                        pm.environment.set(\"fromParam\", fromParamForTest.toString());\r",
											"                        pm.environment.set(\"sizeParam\", sizeParamForTest.toString());\r",
											"\r",
											"                        console.log(\"PreReq: All entities created. Expected non-deleted comments for target event count: \" + expectedResult.length);\r",
											"                        console.log(\"PreReq: Setup complete for GET non-deleted comments by event, page 2.\");\r",
											"                    });\r",
											"                });\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Код статуса ответа 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ является валидным JSON и представляет собой массив\", function () {\r",
											"    pm.response.to.be.json;\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"const returnedComments = pm.response.json();\r",
											"const targetEventId = parseInt(pm.environment.get(\"targetEventId\"));\r",
											"const allExpectedNonDeletedForTarget = JSON.parse(pm.environment.get(\"expectedNonDeletedForTargetEvent\") || \"[]\");\r",
											"\r",
											"const from = parseInt(pm.environment.get(\"fromParam\"));\r",
											"const size = parseInt(pm.environment.get(\"sizeParam\"));\r",
											"\r",
											"const expectedSlice = allExpectedNonDeletedForTarget.slice(from, from + size);\r",
											"const expectedCountOnThisPage = expectedSlice.length;\r",
											"\r",
											"pm.test(`Возвращено ${expectedCountOnThisPage} комментариев (согласно eventId, isDeleted=false, from=${from}, size=${size})`, function () {\r",
											"    pm.expect(returnedComments.length).to.equal(expectedCountOnThisPage);\r",
											"});\r",
											"\r",
											"if (returnedComments.length > 0) {\r",
											"    pm.test(\"Все возвращенные комментарии принадлежат targetEventId и имеют isDeleted=false\", function () {\r",
											"        returnedComments.forEach(function(comment, index) {\r",
											"            pm.expect(comment, `Комментарий #${index}`).to.have.all.keys(\r",
											"                'id', 'text', 'author', 'eventId', 'createdOn', 'updatedOn', 'isEdited', 'isDeleted'\r",
											"            );\r",
											"            pm.expect(comment.eventId, `ID события комментария #${index}`).to.equal(targetEventId);\r",
											"            pm.expect(comment.isDeleted, `Флаг isDeleted комментария #${index}`).to.be.false;\r",
											"        });\r",
											"    });\r",
											"\r",
											"    pm.test(\"Содержимое и порядок комментариев соответствуют ожидаемым для данной страницы\", function() {\r",
											"        pm.expect(returnedComments.length).to.equal(expectedSlice.length, \"Длина полученного массива должна совпадать с ожидаемым срезом для страницы\");\r",
											"\r",
											"        returnedComments.forEach((returned, i) => {\r",
											"            const expected = expectedSlice[i];\r",
											"            if (!expected) {\r",
											"                pm.expect.fail(`Ожидаемый комментарий с индексом ${i} (в срезе) отсутствует в expectedSlice`);\r",
											"                return;\r",
											"            }\r",
											"            pm.expect(returned.id, `ID комментария ${i}`).to.equal(expected.id);\r",
											"            pm.expect(returned.text, `Текст комментария ${i}`).to.equal(expected.text);\r",
											"            pm.expect(returned.author.id, `Author ID ${i}`).to.equal(expected.author.id);\r",
											"            pm.expect(returned.eventId, `Event ID ${i}`).to.equal(expected.eventId);\r",
											"            pm.expect(returned.isDeleted, `isDeleted ${i}`).to.be.false;\r",
											"        });\r",
											"    });\r",
											"\r",
											"} else if (expectedCountOnThisPage > 0) {\r",
											"    pm.test(\"Ожидались комментарии, но получен пустой массив (с фильтрами eventId, isDeleted, pagination)\", function() {\r",
											"        pm.expect.fail(\"Ожидаемые комментарии для данной страницы не были возвращены.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"pm.test(\"Очистка переменных окружения после теста\", function () {\r",
											"    pm.environment.unset(\"targetEventId\");\r",
											"    pm.environment.unset(\"fromParam\");\r",
											"    pm.environment.unset(\"sizeParam\");\r",
											"    pm.environment.unset(\"expectedNonDeletedForTargetEvent\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments?eventId={{targetEventId}}&isDeleted=false&from={{fromParam}}&size={{sizeParam}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{targetEventId}}"
										},
										{
											"key": "isDeleted",
											"value": "false"
										},
										{
											"key": "from",
											"value": "{{fromParam}}"
										},
										{
											"key": "size",
											"value": "{{sizeParam}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}